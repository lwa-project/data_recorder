// ========================= DROSv2 License preamble===========================
// Software for DROSv2 is covered jointly under GPLv3 and Boost 1.0 licenses,
// to the extent required by included Boost sources and GPL sources, and to the
// more restrictive case pertaining thereunto, as defined herebelow. Beyond those
// requirements, any code not explicitly restricted by either of thowse two license
// models shall be deemed to be licensed under the GPLv3 license and subject to
// those restrictions.
//
// Copyright 2012, Virginia Tech, University of New Mexico, and Christopher Wolfe
//
// ========================= Boost License ====================================
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
// =============================== GPL V3 ====================================
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.


#ifndef STORAGE_H_
#define STORAGE_H_

#include "../Primitives/StdTypes.h"

#include <boost/algorithm/string.hpp>
#include <boost/thread.hpp>
#include <boost/foreach.hpp>

#include <string.h>
#include <unistd.h>
#include <sys/stat.h>
#include <sys/statvfs.h>
#include <sys/types.h>
#include <dirent.h>
#include <sys/inotify.h>

#include "../Common/Common.h"
#include "../Common/Primitives.h"
#include "../Primitives/Patterns.h"

#include "Folder.h"
#include "File.h"


#define _strip_newlines      " | tr -d '\\n'"
#define _last_word           " | sed 's/.*\\s?*//'"
#define _first_word          " | sed 's/\\s?*.*//'"
#define _nth_word(n)         " | nawk '{print $" #n "}'"

// define storage states
#define E_StS      StorageState
#define E_StS_VALS (Down)(UpInternal)(UpExternal)(UpBoth)
MAKE_ENUM(E_StS, E_StS_VALS);
DECL_ENUM_STR(E_StS);


class Storage {

	////////////////////////////////
	/// Storage System Interface ///     Responsible for upping and downing storage, querying state, etc
	////////////////////////////////
public:
	static string humanReadable(const size_t size);
	static string humanReadableBW(const double rate);
	static StorageState getState();
	static bool up(bool rescan);
	static bool down(bool rescan);
	static bool upAsynch(bool rescan);
	static bool downAsynch(bool rescan);
	static bool isUp();
	static bool     haveDevices(StorageType st = ST_INTERNAL);
	static unsigned getDeviceCount(StorageType st = ST_INTERNAL);
	static int      resolveArraySelect(StorageType st, string as, string& comment); // return a device index based on an array select string, -1 on DNE failure
	static Storage* getDevice(unsigned index, StorageType st = ST_INTERNAL);
	static Storage* getDevice(string volname, StorageType st = ST_INTERNAL);
	static Storage* getDeviceByPartition(string partition, StorageType st = ST_INTERNAL);
	static Storage* getDeviceByMountPoint(string mountpoint, StorageType st = ST_INTERNAL);
	static void     reportAll();

	////////////////////////////////
	/// System Variables         ///
	////////////////////////////////

private:
	DECLARE_ACCESS_MUTEX_ST();
	static vector<Storage*> external;
	static vector<Storage*> internal;
	volatile static unsigned n_external;
	volatile static unsigned n_internal;
	volatile static bool __isUp;
	static void __doUp(bool rescan);
	static void __doDown(bool rescan);
	static volatile bool asynchInProgress;
	static boost::thread* asynchThread;
	////////////////////////////////
	/// Storage Object Interface ///    Responsible for determining file information, etc.
	////////////////////////////////

public:
	// information about the filesystem
	bool        isValid()       const ;
	StorageType getStorageType() const;
	int         getId()         const ;
	string      getMountPoint() const ;
	string      getPartition()  const ;
	string      getVolumeName() const ;
	size_t      getBlockSize()  const ;
	size_t      getBlockCount() const ;
	size_t      getSize()       const ;
	size_t      getRaidDrives() const ;
	size_t      getRaidStripe() const ;
	size_t      getRaidStride() const ;
	size_t      getFreespace()  const ;
	void        formatDevice();
	bool        setVolumeName(const string& newName);

	// information about directory contents
	int getFileCount(FileType t = FT_GENERAL);
	string getFileName(int id, FileType t = FT_GENERAL);


	// opening/creating files
	File* getOutFile(FileType type, string name, size_t preallocate);
	File* getInFile(FileType type, string name);
	File* getQueryFile(FileType type, string name);
	File* getQueryFile(FileType type, int id);
	void  putFile(File* file);



private:
	// constructors / destructors; private because managed by static portion of class
	Storage(string path, StorageType __type, int id);
	Storage();
	Storage(const Storage& toCopy);
	virtual ~Storage();

	// internal functions, used in construction, ops, etc.
	void __createFileStructure(); // create folder structure in DROS expects
	void __deleteAll();			  // delete files under DROS-controlled folders
	void __format();              // "format" the device, does not affect files outside of DROS folders
	void __goingDown();			  // indication that the storage system is about to go offline

	// info about currently active File objects rooted in this device
	unsigned getActiveFilecount();
	void     registerFile(File* f);
	void     unregisterFile(File* f);

	void report();

	////////////////////////////////
	/// Storage Object Variables ///    Responsible for determining file information, etc.
	////////////////////////////////

private:

	// set by static
	int    id;

	//intrinsics
	string path;
	string partition;
	string volname;
	size_t blockSize;
	size_t blockCount;
	size_t stripe;
	size_t stride;

	// derived, but useful
	size_t size;
	size_t driveCount;

	// state and control
	StorageType __type;
	bool valid;

	// watched folders
	vector<Folder*> folders;

	// files
	DECLARE_ACCESS_MUTEX();
	set<File*> activeFiles;






};

#endif /* STORAGE_H_ */
