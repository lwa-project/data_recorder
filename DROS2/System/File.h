// ========================= DROSv2 License preamble===========================
// Software for DROSv2 is covered jointly under GPLv3 and Boost 1.0 licenses,
// to the extent required by included Boost sources and GPL sources, and to the
// more restrictive case pertaining thereunto, as defined herebelow. Beyond those
// requirements, any code not explicitly restricted by either of thowse two license
// models shall be deemed to be licensed under the GPLv3 license and subject to
// those restrictions.
//
// Copyright 2012, Virginia Tech, University of New Mexico, and Christopher Wolfe
//
// ========================= Boost License ====================================
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
// =============================== GPL V3 ====================================
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#ifndef FILE_H_
#define FILE_H_

#include "../Primitives/StdTypes.h"
#include "../Common/Primitives.h"

#include "Storage.h"
#include <stdio.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <sys/types.h>
#include <sys/xattr.h>
#include <errno.h>

#include <linux/xattr.h>
#include <linux/errno.h>

class Storage;
class Folder;

class File {
public:
	friend class Storage;

	volatile int*        getDescriptor()        { return &fd;     }
	string      getName()        const { return name;    }
	string      getFullPath()    const { return fullpath;}
	StorageType getStorageType() const { return sType;   }
	FileType    getFileType()    const { return fType;   }
	bool        isOpen()         const { return (fd!=-1);}

	string getAttribute(const string& attrname)    const {
		string _attrname = XATTR_USER_PREFIX + attrname;
		char aval[8192];
		bzero(aval,8192);
		ssize_t len = getxattr(getFullPath().c_str(), _attrname.c_str(), aval, 8192);
		if (len <= 0){
			cout << "RET " << len << " ERR " << strerror(errno) << endl;
			return "";
		} else {
			aval[len]=0;
			return string(aval, len);
		}
	}
	void setAttribute(const string& attrname, const string& attrval){
		string _attrname = XATTR_USER_PREFIX + attrname;
		if (setxattr(getFullPath().c_str(), _attrname.c_str(), attrval.c_str(), attrval.size(), 0)){
			cout << "Warning: failed to set attribute '"<<attrname<<"' on file '"<<getFullPath()<<"'.\n";
		}
	}

	size_t getSize(){
		struct stat fstat;
		if (stat( fullpath.c_str(), &fstat ) == 0){
			return fstat.st_size;
		} else {
			return 0;
		}
	}

	bool exists(){
		return boost::filesystem::exists(getFullPath());
	}
	void remove(){
		this->close();
		unlink(this->getFullPath().c_str());
	}

	size_t getAllocatedSize(){
		struct stat fstat;
		if (stat( fullpath.c_str(), &fstat ) == 0){
			return fstat.st_blocks * 512ll;
		} else {
			return 0;
		}
	}

	void open(){
		if (!isOpen()){
			fd=::open(getFullPath().c_str(), O_RDONLY);
			if (fd == -1){
				cout << "Warning: failed to open file '"<<getFullPath()<<"'.\n";
			}
		}
	}
	void close(){
		if (isOpen()){
			::close(fd);
			fd=-1;
		}
	}

private:
	File(const string& name,const string& fullpath, StorageType sType, FileType fType, int fd):
		name(name), fullpath(fullpath), sType(sType), fType(fType), fd(fd){
	}
	virtual ~File(){
	}

	string       name;
	string       fullpath;
	StorageType  sType;
	FileType     fType;
	volatile int fd;
};

#endif /* FILE_H_ */
