// ========================= DROSv2 License preamble===========================
// Software for DROSv2 is covered jointly under GPLv3 and Boost 1.0 licenses,
// to the extent required by included Boost sources and GPL sources, and to the
// more restrictive case pertaining thereunto, as defined herebelow. Beyond those
// requirements, any code not explicitly restricted by either of thowse two license
// models shall be deemed to be licensed under the GPLv3 license and subject to
// those restrictions.
//
// Copyright 2012, Virginia Tech, University of New Mexico, and Christopher Wolfe
//
// ========================= Boost License ====================================
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
// =============================== GPL V3 ====================================
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

//////////////////////////////////////////////////////////////////////////////////////////
// A generic buffer class for arbitrary objects.
// 1) Template instantiator is responsoble for using constructors/destructors when class-
//    based objects are inserted/removed. i.e.:
//      ObjectBuffer<Foo> myFooBuffer(100);
//      Foo * myFooObj = myFooBuffer.nextIn();
//      if (myFooObj != NULL){
//         myFooObj = new (myFooObj) Foo (...);
//      }
//      myFooBuffer.doneIn(myFooObj);
//      [...]
//      Foo * myFooObj2 = myFooBuffer.nextOut();
//      if (myFooObj2 != NULL){
//         myFooObj2->~Foo();
//      }
//      myFooBuffer.doneOut(myFooObj);
//
// 2) The lifecycle of the object is instantiator-determined, but pointers returned must
//    not be freed by instantiator
//
// 3) no destructors are called on destruction of the queue, unless an onBufferDestroying hook
//      is registered. i.e.:
//      class Foo {
//      	[...]
//          static void onBufferDestroying(Foo* obj){obj->~Foo();}
//      	virtual ~Foo(){}
//		}
//      ObjectBuffer<Foo> myFooBuffer(100,&Foo::onBufferDestroying,11,21);
//      which calls obj->onBufferDestroying() for each object in the buffer in
//      stages 11-21, inclusive, at the time of destruction.
//////////////////////////////////////////////////////////////////////////////////////////

#ifndef OBJECTBUFFER_H_
#define OBJECTBUFFER_H_
#include "GenericBuffer.h"
#include <typeinfo>
#include <iostream>
#include <iomanip>
#include "../System/Log.h"
#include "../Threading/LockHelper.h"

#define CAST_TO   (T_REF)
#define CAST_FROM (void*)
using namespace std;

template <class T>
class ObjectBuffer : public GenericBuffer{
public:

	typedef T* T_REF;
	// function prototype for destructor method (if any)
	typedef void (*onDestroyMethod)(T_REF obj);

	typedef struct __StageRef{
		T_REF operator[](unsigned int peekahead){
			return parent->peekStage(stage, peekahead);
		}
		__StageRef(ObjectBuffer<T>* _parent, int _stage):parent(_parent),stage(_stage){

		}
		ObjectBuffer<T>* parent;
		int stage;
	}StageRef;

	ObjectBuffer(
			int count,
			int numStages,
			onDestroyMethod onDestroy = (onDestroyMethod)NULL,
			int minOD = 0,
			int maxOD = -1):
				GenericBuffer(sizeof(T),count,numStages),
				// rangecheck and default to all stages for onDestroy
				__minOD((minOD<0)?0:((minOD>=numStages)?numStages-1:minOD)),
				__maxOD((maxOD==-1)?(numStages-1):((maxOD<__minOD)?__minOD:((maxOD<numStages)?maxOD:numStages-1))),
				OD(onDestroy)
				{
		LOGC(L_DEBUG, "[ObjectBuffer<" + string(typeid(T).name()) + ">] Constructed : (" + LXS(count) + "," +LXS(numStages) + ", &[" + LXS((size_t) onDestroy) + "] ,"  + LXS(minOD) + "," + LXS(maxOD) +").", ACTOR_COLORS);
	}
	virtual T_REF   nextIn()const{
		SERIALIZE_ACCESS();
		return CAST_TO(GenericBuffer::nextIn());
	}
	virtual void    doneIn(T_REF obj){
		SERIALIZE_ACCESS();
		GenericBuffer::doneIn(CAST_FROM(obj));
	}
	virtual T_REF   nextOut()const{
		SERIALIZE_ACCESS();
		return CAST_TO(GenericBuffer::nextOut());
	}
	virtual void    doneOut(T_REF obj){
		SERIALIZE_ACCESS();
		GenericBuffer::doneOut(CAST_FROM(obj));
	}
	virtual T_REF   nextStage(int stage)const{
		SERIALIZE_ACCESS();
		return CAST_TO(GenericBuffer::nextStage(stage));
	}
	virtual void    doneStage(int stage, T_REF obj){
		SERIALIZE_ACCESS();
		GenericBuffer::doneStage(stage,CAST_FROM(obj));
	}
	virtual T_REF   peekStage(int stage, unsigned int peekAhead)const{
		SERIALIZE_ACCESS();
		return CAST_TO(GenericBuffer::peekStage(stage,peekAhead));
	}
	virtual void    reset(){
		SERIALIZE_ACCESS();
		__doOnDestroy();
		GenericBuffer::reset();
	}
	virtual ~ObjectBuffer(){
		__doOnDestroy();
	}
	StageRef operator[](int stage){
		SERIALIZE_ACCESS();
		return __StageRef(this,stage);
	}

private:
	NOCOPY_DEF(ObjectBuffer);
	NOASSIGN_DEF(ObjectBuffer);
	DECLARE_ACCESS_MUTEX();
	void    __doOnDestroy(){
		// handle onDestroy hook if present;
		if (OD != ((onDestroyMethod)NULL)){
			// first move rake all objects from stage __minOD to stage __maxOD
			for(int stage = __minOD; stage < __maxOD; stage++){
				T_REF tmp;
				while((tmp=nextStage(stage))!=NULL){
					doneStage(stage,tmp);
				}
			}
			// now call OD on each in stage __maxOD
			for(int stage = __maxOD; stage >= __minOD; stage--){
				T_REF tmp;
				while((tmp=nextStage(stage))!=NULL){
					OD(tmp);
					doneStage(stage,tmp);
				}
			}
		}
	}

protected:
	int __minOD;
	int __maxOD;
	onDestroyMethod OD;

};
#endif /* OBJECTBUFFER_H_ */
