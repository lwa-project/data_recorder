// ========================= DROSv2 License preamble===========================
// Software for DROSv2 is covered jointly under GPLv3 and Boost 1.0 licenses,
// to the extent required by included Boost sources and GPL sources, and to the
// more restrictive case pertaining thereunto, as defined herebelow. Beyond those
// requirements, any code not explicitly restricted by either of thowse two license
// models shall be deemed to be licensed under the GPLv3 license and subject to
// those restrictions.
//
// Copyright 2012, Virginia Tech, University of New Mexico, and Christopher Wolfe
//
// ========================= Boost License ====================================
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
// =============================== GPL V3 ====================================
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#ifndef PARCELQUEUE_H_
#define PARCELQUEUE_H_
#include "BufferTypes.h"

#define ABUF_UNUSED 0
#define ABUF_USING  1
#define ABUF_USED   2

#define PBUF_UNUSED 0



class ParcelQueue {
public:
#ifdef CONFIG_UNIT_TESTS
	friend void __PQ_Producer();
	friend void __PQ_Consumer();
	static void unitTest();
#endif
	ParcelQueue(const size_t &numParcels, const size_t &numAllocations, const bool &clearUnused);

	// =====================================================
	// the allocator side interface
	virtual Allocation* nextAllocIn() const;
	virtual void        doneAllocIn(Allocation* ptr);
	virtual Allocation* nextAllocOut() const;
	virtual void        doneAllocOut(Allocation* ptr);
	virtual size_t		numAllocUsed()const;

	// =====================================================
	// single-parcel user-side interface
	virtual Parcel*     nextParcel(size_t size);
	virtual void        doneParcel(Parcel* ptr);

	// =====================================================
	// multi-parcel user-side interface (mutually exclusive)

	// socket recvmmsg preparation/finalization
	// note: only msgvec[X].msg_hdr.msg_iov and msgvec[X].msg_hdr.msg_iovlen are modified / interacted with
	virtual size_t  nextMsgs(const size_t msg_size, size_t msg_count, struct mmsghdr *msgvec);
	virtual void    doneMsgs(size_t messagesUsed, struct mmsghdr *msgvec);

	// AIO list preparations/finalization
	// size_t  nextAiol(const size_t msg_size, size_t msg_count, struct aiocb * aio_list);
	// bool          doneAiol(size_t messagesUsed, struct aiocb * aio_list);

	virtual void signalParcelConsumerDone();
	virtual bool isConsumerDone()const;
	virtual Allocation* getFractionalCompletion();
	virtual void reset();

	virtual ~ParcelQueue();
	bool isValid() const{return valid;}
	void    print()const;

protected:
	AllocationBuffer abuf;
	ParcelBuffer     pbuf;
	size_t           palloc_peek;   // block offset from the head of the in-use queue where we are currently allocating from
	size_t           palloc_offset; // byte offset within the block pointed to by palloc_peek from which we are allocating
	size_t           pfree_peek;    // block offset from the head of the in-use queue where we are currently freeing at
	size_t           pfree_offset;  // byte offset within the block pointed to by pfree_peek where we currently freeing at
	bool             haveFragment;  // indicating previous parcel allocation encountered an allocation boundary (and hence fragment contains the partial allocation)
	const bool       clearUnused;   // flag indicating that unused portions of the returned parcel should be blanked
	bool 			 valid;
	bool             consumerDone;  // flag indicating no more parcels will be requested
	Allocation       remnant;       // partially used allocation block
private:
	 size_t       __allocNParcel(const size_t size, const size_t count); // allocate N parcels and insert them into the parcel queue, return the number allocated
	 bool         __allocParcel(const size_t size); // allocate a parcel and insert it into the parcel queue, return true on success
	 void         __freeParcel();                         // free the the used parcel-queue's tail (any failure is a program error)
	 bool         __grabFreeAlloc();                      // move a free allocation into the in-use queue, return true if successful
	 bool         __ungrabInUseAlloc();                   // move an in-use allocation into the used queue, return true if successful
	 Allocation*  __allocLocn();                          // get the location of the allocation we are currently parceling from
	 Allocation*  __freeLocn();                           // get the location of the allocation we are currently freeing to
	 void         __advanceAlloc();                       // advance internal offsets for allocation (when we finish parceling out one allocation)
	 void         __advanceFree();                        // advance internal offsets for allocation (when we all parcels of one allocation have been freed)

	ParcelQueue(const ParcelQueue& toCopy):
		abuf(0,0,NULL,0,0),
		pbuf(0,0,NULL,0,0),
		clearUnused(false){}
	ParcelQueue& operator =(const ParcelQueue& toCopy){return *this;}


#ifdef CONFIG_UNIT_TESTS
	static ParcelQueue* utpq; // unit test parcel queue
#endif
};

#endif /* PARCELQUEUE_H_ */
