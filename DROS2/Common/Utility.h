// ========================= DROSv2 License preamble===========================
// Software for DROSv2 is covered jointly under GPLv3 and Boost 1.0 licenses,
// to the extent required by included Boost sources and GPL sources, and to the
// more restrictive case pertaining thereunto, as defined herebelow. Beyond those
// requirements, any code not explicitly restricted by either of thowse two license
// models shall be deemed to be licensed under the GPLv3 license and subject to
// those restrictions.
//
// Copyright 2012, Virginia Tech, University of New Mexico, and Christopher Wolfe
//
// ========================= Boost License ====================================
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
// =============================== GPL V3 ====================================
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.


#ifndef UTILITY_H_
#define UTILITY_H_
#include "../Primitives/StdTypes.h"


#include <arpa/inet.h>
#include <cstring>

#include "../Primitives/StringList.h"
#include "../Primitives/TypeConversion.h"
#include "../Primitives/StringStringMap.h"
#include "../Threading/LockHelper.h"



class Utility {
public:
	static const string re_respto;
	static const string re_meta;

	// copying data; here b/c is template
	template<typename T> static T* alloc(size_t count, bool zero = true){
		if (!count) return (T*) NULL;
		T* rv = new T[count];
		if (zero){
			bzero((void*) rv, count * sizeof(T));
		}
		return rv;
	}
	template<typename T> static T* clone(const T* source, size_t count, ssize_t acount=-1){
		size_t _acount = (acount == -1) ? count : acount;
		if ((!_acount) || (!source)) return (T*) NULL;
		T* dest = new T[_acount];
		if (!dest) return dest;
		if (count);
			std::copy(source, source+count, dest);
		return dest;
	}

	template<typename T> static void release(T*& t){
		if (t){
			delete [] t;
			t = (T*) NULL;
		}
	}


	// string matching
	static bool       reMatch(const string& re, const string& str);
	static bool       reMatchSub(const string& re, const string& str);
	static StringList getMatches(const string& re, const string& str, const bool removeEmpty=true);
	static StringList getMatchesSub(const string& re, const string& str, const bool removeEmpty=true);
	//string removal
	static string strip(string& s, const string& pattern);

	// regex shortcuts
	static string __opt(const string& s);                  // optional token
	static string __or(const string& a, const string& b);  // either or
	static string __rem(const int min=0, const int max=0); // count specifier


//	static string getPosString(size_t offset, size_t length, const char* buf, size_t buflen);
//	static void   setPosString(size_t offset, size_t length, char* buf, size_t buflen, string str);
//	static string safeEncode(const char* chars, size_t size);
//	static size_t safeDecode(const string& safe, char* buf, size_t max_size);

	// extracting metadata from strings of the form {PARAM=VALUE}, surrounded with optional whitespace
	static StringStringMap extractMeta(string& stringWillBeMutated);

private:
	Utility();
	virtual ~Utility();
	DECLARE_ACCESS_MUTEX_ST();

};

#endif /* UTILITY_H_ */
