// ========================= DROSv2 License preamble===========================
// Software for DROSv2 is covered jointly under GPLv3 and Boost 1.0 licenses,
// to the extent required by included Boost sources and GPL sources, and to the
// more restrictive case pertaining thereunto, as defined herebelow. Beyond those
// requirements, any code not explicitly restricted by either of thowse two license
// models shall be deemed to be licensed under the GPLv3 license and subject to
// those restrictions.
//
// Copyright 2012, Virginia Tech, University of New Mexico, and Christopher Wolfe
//
// ========================= Boost License ====================================
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
// =============================== GPL V3 ====================================
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#ifndef WAITTHREAD_H_
#define WAITTHREAD_H_

#include "../Common/Messaging.h"
#include "../Common/Common.h"

#include "AbstractThread.h"
#include <boost/utility.hpp>
#include <boost/thread.hpp>

template<class T>
class WaitThread : public AbstractThread {
public:
	WaitThread(string name, size_t waitTime):
		AbstractThread(name),
		name(name),
		wq(name),
		waitTime(waitTime),
		interrupted(false),
		why(0){

	}
	virtual void start(){
		t = new boost::thread(boost::bind(&WaitThread<T>::run, this));
	}
	virtual void stop(){
		if (t!=NULL){t->join();}
	}
	virtual void doAbort(){
		interrupt(0);
	}
	void interrupt(int why){
		this->why=why;
		interrupted = true;
	}
	bool         isRunning() const { return __running; }

	virtual ~WaitThread(){}
	virtual bool onStart(){ return true;}                   // return value indicates thread entered run state successfully
	virtual bool onDoReceive(T& received){return false;}    // return value indicates thread is done and should terminate
	virtual void onStop(){}                                 // no return, called once on stop, regardless of reason, assuming onStart returned true

protected:
	void run(){
		ThreadManager::getInstance()->announceSelf(getName());
		if (onStart()){
			__running=true;
			LOGC( L_INFO, "["+ getName()+ "] Running.",ACTOR_COLORS);
			T rx;
			bool done=false;
			while (!done && !interrupted){
				if (wq.dequeueTimed(rx,waitTime)){
					this->onDoReceive(rx);
				} else {
					// no timeout behaviour
				}
			}
			onStop();
			LOGC( L_INFO, "["+ getName()+ "] Stopped.",ACTOR_COLORS);
			__running=false;
		} else {
			LOGC( L_WARNING, "["+ getName()+ "] Cannot start: onStart() returned false..",ACTOR_ERROR_COLORS);
		}
	}

private:
	boost::thread* t;
	string name;
	WaitQueue<T> wq;
	size_t waitTime;
	volatile bool interrupted;
	int why;
	bool __running;
};

#endif /* WAITTHREAD_H_ */
