// ========================= DROSv2 License preamble===========================
// Software for DROSv2 is covered jointly under GPLv3 and Boost 1.0 licenses,
// to the extent required by included Boost sources and GPL sources, and to the
// more restrictive case pertaining thereunto, as defined herebelow. Beyond those
// requirements, any code not explicitly restricted by either of thowse two license
// models shall be deemed to be licensed under the GPLv3 license and subject to
// those restrictions.
//
// Copyright 2012, Virginia Tech, University of New Mexico, and Christopher Wolfe
//
// ========================= Boost License ====================================
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
// =============================== GPL V3 ====================================
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#ifndef THREADMANAGER_H_
#define THREADMANAGER_H_
#include "../Primitives/StdTypes.h"
#include "../Primitives/TypeConversion.h"
#include "../Threading/LockHelper.h"
#include <dirent.h>
#include <boost/thread.hpp>
#include <unistd.h>
#include <sys/stat.h>
#include <sys/syscall.h>
#include <boost/thread/mutex.hpp>

class AbstractThread;
class ThreadManager{
	//singleton
public:
	static ThreadManager* getInstance(){
		SERIALIZE_ACCESS_ST();
		if (ThreadManager::instance == NULL){
			ThreadManager::instance = new ThreadManager();
		}
		return ThreadManager::instance;
	}
	static string threadReport(){
		SERIALIZE_ACCESS_ST();
		stringstream ss("");
		ss << "======================= Active Thread Report =======================\n";
		int pid = getpid();
		if (pid<0){
			ss << "Error: Can't get process pid: " << string(strerror(errno)) << "\n";
		} else {
			string folder = "/proc/" + LXS(pid) + "/task/";
			DIR *d = opendir( folder.c_str() );
			if (!d) {
				ss << "Error: Can't open directory '"<<folder<<"' \n";
			} else {
				struct dirent *de;
				int count = 0;
				while ((de = readdir(d)) != NULL){
					if (de->d_name[0] != '.'){ // no hidden, no . and ..
						ss << "["<<setw(4)<<count<<"]: tid = " << string(de->d_name) << endl;
						count++;
					}
				}
				closedir(d);
			}
		}
		ss << "===================== End Active Thread Report =====================\n";
		return ss.str();
	}
	AbstractThread* getByName(const string name){
		SERIALIZE_ACCESS();
		return registry[name];
	}
	void registerThread(const string name, AbstractThread* thread){
		SERIALIZE_ACCESS();
		registry[name] = thread;
	}
	void unRegisterThread(const string name){
		SERIALIZE_ACCESS();
		registry[name] = NULL;
	}
	void announceSelf(const string myName){
		SERIALIZE_ACCESS();
		int tid = syscall(SYS_gettid);
		if (tid>=0){
			names[tid] = myName;
		}
	}
	void reset(){
		SERIALIZE_ACCESS();
		registry.clear();
		names.clear();
	}
	string backtrace(pid_t tid){
		SERIALIZE_ACCESS();
		if (tid>=0 && !names[tid].empty())
			return names[tid];
		else
			return "Anonymous";
	}

	virtual ~ThreadManager(){
	}
private:
	DECLARE_ACCESS_MUTEX_ST();
	DECLARE_ACCESS_MUTEX();
	ThreadManager(){}
	static ThreadManager* instance;

	map<string,AbstractThread*> registry;
	map<pid_t, string>          names;


};
#endif /* THREADMANAGER_H_ */
