// ========================= DROSv2 License preamble===========================
// Software for DROSv2 is covered jointly under GPLv3 and Boost 1.0 licenses,
// to the extent required by included Boost sources and GPL sources, and to the
// more restrictive case pertaining thereunto, as defined herebelow. Beyond those
// requirements, any code not explicitly restricted by either of thowse two license
// models shall be deemed to be licensed under the GPLv3 license and subject to
// those restrictions.
//
// Copyright 2012, Virginia Tech, University of New Mexico, and Christopher Wolfe
//
// ========================= Boost License ====================================
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
// =============================== GPL V3 ====================================
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#ifndef SIMPLERECORDER_H_
#define SIMPLERECORDER_H_

#include "BaseRecorder.h"
#include "../Streaming/TicketBuffer.h"
#include "../Threading/GenericThread.h"
#include "../System/Time.h"
enum SimpleRecorderState{
	SR_UNINIT,
	SR_CONNECTING,
	SR_SETFILE,
	SR_STARTING,
	SR_RECORDING,
	SR_STOPPING,
	SR_UNSETFILE,
	SR_DISCONNECTING,
	SR_ABORTING,
	SR_CLEANUP_ERROR,
	SR_CLEANUP_NORMAL,
	SR_SHUTDOWN
};

class SimpleRecorder: public BaseRecorder::FileCallbackHandler {
public:
	SimpleRecorder(File*outfile, TicketBuffer* buf, size_t size, bool doSidCheck):
		recorder(this, doSidCheck),
		outfile(outfile),
		buf(buf),
		size(size),
		state(SR_UNINIT)
		{
	}

	virtual void start(){
		if (state == SR_UNINIT){
			SERIALIZE_ACCESS();
			if (outfile && buf && outfile->isOpen()){
				recorder.start();
			}
		}
	}

	virtual void stop(){
		if (state == SR_RECORDING){
			SERIALIZE_ACCESS();
			if (outfile && buf && outfile->isOpen()){
				state = SR_STOPPING;
				recorder.stopRecording();
			}
		}

	}

	virtual void wait(){
		while (!(state == SR_SHUTDOWN)){

		}
	}
	virtual void handleEvent(BaseRecorder* r, FileEvent e, File* f){
		//LOGC(L_INFO, string(__FILE__) +":"+string(__FUNCTION__)+"()" , ACTOR_ERROR_COLORS);
		switch(state){
			case SR_UNINIT:			LOGC(L_INFO, "SR_UNINIT w/ event " + recorder.eventString(e), ACTOR_WARNING_COLORS); break;
			case SR_CONNECTING:     LOGC(L_INFO, "SR_CONNECTING w/ event " + recorder.eventString(e), ACTOR_WARNING_COLORS); break;
			case SR_SETFILE:        LOGC(L_INFO, "SR_SETFILE w/ event " + recorder.eventString(e), ACTOR_WARNING_COLORS); break;
			case SR_STARTING:		LOGC(L_INFO, "SR_STARTING w/ event " + recorder.eventString(e), ACTOR_WARNING_COLORS); break;
			case SR_RECORDING:		LOGC(L_INFO, "SR_RECORDING w/ event " + recorder.eventString(e), ACTOR_WARNING_COLORS); break;
			case SR_STOPPING:		LOGC(L_INFO, "SR_STOPPING w/ event " + recorder.eventString(e), ACTOR_WARNING_COLORS); break;
			case SR_UNSETFILE:		LOGC(L_INFO, "SR_UNSETFILE w/ event " + recorder.eventString(e), ACTOR_WARNING_COLORS); break;
			case SR_DISCONNECTING: 	LOGC(L_INFO, "SR_DISCONNECTING w/ event " + recorder.eventString(e), ACTOR_WARNING_COLORS); break;
			case SR_ABORTING:		LOGC(L_INFO, "SR_ABORTING w/ event " + recorder.eventString(e), ACTOR_WARNING_COLORS); break;
			case SR_SHUTDOWN:       LOGC(L_INFO, "SR_SHUTDOWN w/ event "   + recorder.eventString(e), ACTOR_WARNING_COLORS); break;
			default:				LOGC(L_INFO, "Unknown state w/ event " + recorder.eventString(e), ACTOR_WARNING_COLORS); break;
		}



		SERIALIZE_ACCESS();
		if (r!=&recorder){
			LOGC(L_ERROR, "Unknown recording sending events to simple recorder.", ACTOR_ERROR_COLORS );
			return;
		}
		switch(state){
			case SR_UNINIT:			doEvUninit(e,f);break;
			case SR_CONNECTING:     doEvConnecting(e,f);break;
			case SR_SETFILE:        doEvSetFile(e,f);break;
			case SR_STARTING:		doEvStarting(e,f);break;
			case SR_RECORDING:		doEvRecording(e,f);break;
			case SR_STOPPING:		doEvStopping(e,f);break;
			case SR_UNSETFILE:		doEvUnsetFile(e,f);break;
			case SR_DISCONNECTING: 	doEvDisconnecting(e,f);break;
			case SR_ABORTING:		doEvAborting(e,f);break;
			case SR_SHUTDOWN:
			default:				doEvShutdown(e,f);break;
		}
	}

	virtual void doEvUninit(FileEvent e, File* f){
		switch(e){
		case FE_INIT:
			state = SR_CONNECTING;
			recorder.connect(buf);
			break;
		case FE_CONNECT:
		case FE_FILE_CHANGED:
		case FE_LIMIT:
		case FE_START:
		case FE_STOP:
		case FE_DISCONNECT:
		case FE_DONE:
		case FE_ERROR:
		default:
			LOGC(L_ERROR, "[SimpleRecorder] failed to initialize.", ACTOR_ERROR_COLORS);
			recorder.doAbort();
			state = SR_SHUTDOWN;
			break;
		}
	}

	virtual void doEvConnecting(FileEvent e, File* f){
		switch(e){
		case FE_CONNECT:
			state = SR_SETFILE;
			recorder.setOutputFile(outfile,size);
			break;
		case FE_INIT:
		case FE_FILE_CHANGED:
		case FE_START:
		case FE_LIMIT:
		case FE_STOP:
		case FE_DISCONNECT:
		case FE_DONE:
		case FE_ERROR:
		default:
			LOGC(L_ERROR, "[SimpleRecorder] failed to connect.", ACTOR_ERROR_COLORS);
			state = SR_ABORTING;
			recorder.doAbort();
		break;
		}
	}

	virtual void doEvSetFile(FileEvent e, File* f){
		switch(e){
		case FE_FILE_CHANGED:
			if (f != outfile){
				LOGC(L_ERROR, "[SimpleRecorder] failed to set file, bad pointer.", ACTOR_ERROR_COLORS);
				state = SR_DISCONNECTING;
				recorder.disconnect();
				break;
			} else {
				state = SR_STARTING;
				recorder.startRecording();
			}
			break;
		case FE_INIT:
		case FE_CONNECT:
		case FE_START:
		case FE_LIMIT:
		case FE_STOP:
		case FE_DISCONNECT:
		case FE_DONE:
		case FE_ERROR:
		default:
			LOGC(L_ERROR, "[SimpleRecorder] failed to set file.", ACTOR_ERROR_COLORS);
			state = SR_DISCONNECTING;
			recorder.disconnect();
			break;
		}
	}
	virtual void doEvStarting(FileEvent e, File* f){
		switch(e){
		case FE_START:
			state = SR_RECORDING;
			break;
		case FE_INIT:
		case FE_CONNECT:
		case FE_FILE_CHANGED:
		case FE_LIMIT:
		case FE_STOP:
		case FE_DISCONNECT:
		case FE_DONE:
		case FE_ERROR:
		default:
			LOGC(L_ERROR, "[SimpleRecorder] failed to start.", ACTOR_ERROR_COLORS);
			state = SR_DISCONNECTING;
			recorder.disconnect();
			break;
		}
	}
	virtual void doEvRecording(FileEvent e, File* f){
		switch(e){
		case FE_LIMIT:
			LOGC(L_WARNING, "[SimpleRecorder] file size limit reached.", ACTOR_WARNING_COLORS);
			state = SR_UNSETFILE;
			recorder.setOutputFile();
			break;
		case FE_INIT:
		case FE_CONNECT:
		case FE_FILE_CHANGED:
		case FE_START:
		case FE_STOP:
		case FE_DISCONNECT:
		case FE_DONE:
		case FE_ERROR:
		default:
			LOGC(L_ERROR, "[SimpleRecorder] failed to record.", ACTOR_ERROR_COLORS);
			state = SR_STOPPING;
			recorder.stopRecording();
			break;
		}
	}
	virtual void doEvStopping(FileEvent e, File* f){
		switch(e){
		case FE_STOP:
			state = SR_UNSETFILE;
			recorder.setOutputFile();
			break;
		case FE_INIT:
		case FE_CONNECT:
		case FE_FILE_CHANGED:
		case FE_START:
		case FE_LIMIT:
		case FE_DISCONNECT:
		case FE_DONE:
		case FE_ERROR:
		default:
			LOGC(L_ERROR, "[SimpleRecorder] failed to stop.", ACTOR_ERROR_COLORS);
			state = SR_UNSETFILE;
			recorder.setOutputFile();
			break;
		}
	}
	virtual void doEvUnsetFile(FileEvent e, File* f){
		outfile->close();
		switch(e){
		case FE_FILE_CHANGED:
			break;
		case FE_INIT:
		case FE_CONNECT:
		case FE_START:
		case FE_LIMIT:
		case FE_STOP:
		case FE_DISCONNECT:
		case FE_DONE:
		case FE_ERROR:
		default:
			LOGC(L_ERROR, "[SimpleRecorder] failed to unset output file.", ACTOR_ERROR_COLORS);
			break;
		}
		state = SR_DISCONNECTING;
		recorder.disconnect();
	}
	virtual void doEvDisconnecting(FileEvent e, File* f){
		switch(e){
		case FE_DISCONNECT:
			break;
		case FE_INIT:
		case FE_CONNECT:
		case FE_FILE_CHANGED:
		case FE_START:
		case FE_LIMIT:
		case FE_STOP:
		case FE_DONE:
		case FE_ERROR:
		default:
			LOGC(L_ERROR, "[SimpleRecorder] failed to disconnect.", ACTOR_ERROR_COLORS);
			break;
		}
		state = SR_ABORTING;
		recorder.doAbort();

	}

	virtual void doEvAborting(FileEvent e, File* f){
		switch(e){
		case FE_DONE:
			break;
		case FE_INIT:
		case FE_CONNECT:
		case FE_FILE_CHANGED:
		case FE_START:
		case FE_LIMIT:
		case FE_STOP:
		case FE_DISCONNECT:
		case FE_ERROR:
		default:
			LOGC(L_ERROR, "[SimpleRecorder] failed to abort.", ACTOR_ERROR_COLORS);
			break;
		}
		state = SR_SHUTDOWN;
	}

	virtual void doEvShutdown(FileEvent e, File* f){
		LOGC(L_ERROR, "[SimpleRecorder] received events after shutdown complete.", ACTOR_ERROR_COLORS);
	}

	virtual ~SimpleRecorder(){

	}
	size_t getBytesWritten()const{
		return recorder.getBytesWrittenSinceConnected();
	}
	SimpleRecorderState getState()const{
		return state;
	}
	/*
	void resetFileSize(){
		recorder.resetFileSize();
	}

	*/
	virtual bool wasError(){
		return recorder.wasError();
	}
private:
	DECLARE_ACCESS_MUTEX();
	BaseRecorder  recorder;
	File*         outfile;
	TicketBuffer* buf;
	size_t        size;
	volatile SimpleRecorderState state;
};

#endif /* SIMPLERECORDER_H_ */
