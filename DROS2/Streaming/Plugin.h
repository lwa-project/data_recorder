// ========================= DROSv2 License preamble===========================
// Software for DROSv2 is covered jointly under GPLv3 and Boost 1.0 licenses,
// to the extent required by included Boost sources and GPL sources, and to the
// more restrictive case pertaining thereunto, as defined herebelow. Beyond those
// requirements, any code not explicitly restricted by either of thowse two license
// models shall be deemed to be licensed under the GPLv3 license and subject to
// those restrictions.
//
// Copyright 2012, Virginia Tech, University of New Mexico, and Christopher Wolfe
//
// ========================= Boost License ====================================
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
// =============================== GPL V3 ====================================
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#ifndef PLUGIN_H_
#define PLUGIN_H_

#include "QueuedSubscriber.h"
#include "TicketBuffer.h"
#include "../Threading/ThreadPair.h"

//enum PluginState{PS_PROCESSING, PS_FLUSHING, PS_DONE};



class Plugin: public TicketBuffer, public QueuedSubscriber, public ThreadPair{
public:
	typedef struct __TicketTracker{
		TicketBuffer::Ticket* t;
		size_t                next;
		size_t                done;
	}TicketTracker;


	Plugin(const string& _name, TicketBuffer* _source, const TB_Geometry& _outputBufferGeometry);
	virtual ~Plugin();

	// derived class monitor thread funciton
	virtual bool monitor(){return true;}

	// used by the derived class to get data to work with
	void* getNextIn(size_t size);
	void  doneIn(bool release = false);
	void* getNextOut(size_t size);
	void  doneOut(bool release = false);

	// derived class input handling thread method
	virtual void run_master();  // base version just consumes inbound tickets

	// derived class output handling thread method
	virtual void run_slave();   // base version terminates immediately

	// to approximate bandwidth in/out
	size_t getReceiveRate();
	size_t getSendRate();


	// overrides of start and stop behavior to connect/disconnect on start/stop
	virtual void start();
	virtual void stop();




private:
	Plugin();
	DECLARE_ACCESS_MUTEX();
	TicketBuffer* source;                // the upstream buffer
	TB_Geometry outputBufferGeometry;

	/*
	volatile bool haveUpstreamTicket;
	volatile bool upstreamTicketBusy;
	TicketBuffer::Ticket* cur_in;          // the current input ticket
	size_t                cur_in_next;     // frame number of the next available frame in the current input ticket
	size_t                cur_in_done;     // frame number of the next-to-complete frame in the current input ticket



	volatile bool haveDownstreamTicket;
	volatile bool downstreamTicketBusy;
	TicketBuffer::Ticket* cur_out;         // the current output ticket
	size_t                cur_out_next;    // frame number of the next available frame in the current input ticket
	size_t                cur_out_done;    // frame number of the next-to-complete frame in the current input ticket
	*/

	size_t                bytesReceived;
	size_t                bytesSent;



	TicketTracker in;
	TicketTracker out;

	// clear the tick in preparation for use
	void initializeDownstreamTicket(TicketBuffer::Ticket*& _t);


};

#endif /* PLUGIN_H_ */
