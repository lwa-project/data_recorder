// ========================= DROSv2 License preamble===========================
// Software for DROSv2 is covered jointly under GPLv3 and Boost 1.0 licenses,
// to the extent required by included Boost sources and GPL sources, and to the
// more restrictive case pertaining thereunto, as defined herebelow. Beyond those
// requirements, any code not explicitly restricted by either of thowse two license
// models shall be deemed to be licensed under the GPLv3 license and subject to
// those restrictions.
//
// Copyright 2012, Virginia Tech, University of New Mexico, and Christopher Wolfe
//
// ========================= Boost License ====================================
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
// =============================== GPL V3 ====================================
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#ifndef SCHEDULE_H_
#define SCHEDULE_H_

#include "../Primitives/StdTypes.h"
#include "../Primitives/Patterns.h"
#include "../Operations/Operation.h"
#include "../Operations/ScheduledOperation.h"
#include "../Operations/OpIdle.h"
#include "../Threading/LockHelper.h"
#include "../Threading/GenericThread.h"
#include "OpsQueue.h"

// define system states
#define E_ScS      ScheduleState
#define E_ScS_VALS (SchIdle)(SchWait)(SchBusy)
MAKE_ENUM(E_ScS, E_ScS_VALS);
DECL_ENUM_STR(E_ScS);

// for the priority queue
class ScheduleCompare{
public:
    bool operator()(ScheduledOperation*& op1, ScheduledOperation*& op2) // Returns true if op1 is later than op2
    {

    	TimeSlot ts1=op1->getTimeSlot(true);
    	TimeSlot ts2=op1->getTimeSlot(true);
    	bool rv =  (Time::compareTimestamps(ts1.start,ts2.start) <= 0);
    	/*
    	LOGC(L_INFO, "[ScheduleCompare] ("
    			"[" + LXS(ts1.start) + ":" + LXS(ts1.duration) + "]"+
    			" < " +
    			"[" + LXS(ts2.start) + ":" + LXS(ts2.duration) + "]"+
    			" = " + (rv ? "true" : "false") +
    			")", ACTOR_COLORS);
    	*/
    	return rv;
    }
};

class Schedule: public GenericThread {
	// typedef priority_queue<ScheduledOperation*, deque<ScheduledOperation*>, ScheduleCompare> OpsQueue;

///////////////////////////////////////////////////////////////////
// static interface
///////////////////////////////////////////////////////////////////
public:
	SINGLETON_CLASS_HEADER_PUBLIC(Schedule);

private:
	SINGLETON_CLASS_HEADER_PRIVATE(Schedule);
	static OpIdle op_idle;
///////////////////////////////////////////////////////////////////
// object interface
///////////////////////////////////////////////////////////////////
public:
	ScheduleState getState();
	bool          isTimeSlotFree(TimeSlot ts, ScheduledOperation*& conflict_op);
	bool          scheduleOperation(ScheduledOperation* op, ScheduledOperation*& conflict_op);
	bool          cancelOperation(size_t reference, string& comment);
	Operation*    getCurrentOperation();
	int           getScheduleEntryCount();
	string        getScheduleEntry(int i, bool full=false);
	virtual void  doAbort();

private:
	DECLARE_ACCESS_MUTEX();
	OpsQueue      opsQueue;
	ScheduledOperation* currentOperation;
	microsecond doWait(); // return val is a time to wait, funny enough
	microsecond doBusy(); // return val is a time to wait
	bool doCancelCurrent();
	bool doCancelQueued(ScheduledOperation* op);

	volatile bool notifiedWindowStart;
	volatile bool notifiedExecutionStart;
	volatile bool notifiedExecutionStop;
	volatile bool notifiedWindowStop;
	volatile bool currentIsCancelled;
	virtual void run();


};

#endif /* SCHEDULE_H_ */
