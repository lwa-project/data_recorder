// ========================= DROSv2 License preamble===========================
// Software for DROSv2 is covered jointly under GPLv3 and Boost 1.0 licenses,
// to the extent required by included Boost sources and GPL sources, and to the
// more restrictive case pertaining thereunto, as defined herebelow. Beyond those
// requirements, any code not explicitly restricted by either of thowse two license
// models shall be deemed to be licensed under the GPLv3 license and subject to
// those restrictions.
//
// Copyright 2012, Virginia Tech, University of New Mexico, and Christopher Wolfe
//
// ========================= Boost License ====================================
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
// =============================== GPL V3 ====================================
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#ifndef RESPONSESENDER_H_

#define RESPONSESENDER_H_

#include "../Common/Threading.h"
#include "../Common/Messaging.h"
#include "../Primitives/StdTypes.h"

#include <boost/assign/std/vector.hpp>
using namespace boost::assign;

#define RESPONSE_QUEUE_TIME 1000ll /*try for up to a second*/

class ResponseSender: public WaitThread<Message> {
public:
	static void respond(const Message& msg, bool accept=true, string response=""){
		WaitQueue<Message>* wq = WaitQueueManager::getInstance()->getByName<Message>("ResponseSender");
		if (!wq){
			LOGC(L_ERROR, "[ResponseSender] : Cannot access response queue; response dropped.", ACTOR_ERROR_COLORS);
			LOGC(L_ERROR, "[ResponseSender] : " + msg.toString(false), ACTOR_ERROR_COLORS);
			return;
		} else {
			Message rsp(msg);
			rsp.setResponse(accept, SAFE_GET(System,getCurrentStatus), response);
			wq->enqueue(rsp);
			//LOGC(L_DEBUG, "EE " + rsp.toString(true, false), MESSAGING_COLORS );
		}
	}
	static void respondBinary(const Message& msg, bool accept, const char* response, const size_t response_size){
		WaitQueue<Message>* wq = WaitQueueManager::getInstance()->getByName<Message>("ResponseSender");
		if (!wq){
			LOGC(L_ERROR, "[ResponseSender] : Cannot access response queue; response dropped.", ACTOR_ERROR_COLORS);
			LOGC(L_ERROR, "[ResponseSender] : " + msg.toString(false), ACTOR_ERROR_COLORS);
			return;
		} else {
			Message rsp(msg);
			rsp.setResponse(accept, SAFE_GET(System,getCurrentStatus), response, response_size);
			wq->enqueue(rsp);
			//LOGC(L_DEBUG, "EE " + rsp.toString(true, false), MESSAGING_COLORS );
		}
	}

	ResponseSender(unsigned short port, millisecond waitTime=50ll):
		WaitThread("ResponseSender",waitTime), sd(-1), port(port){
	}

	virtual bool onStart(){
		sd = socket(AF_INET, SOCK_DGRAM, 0);
		sd6 = socket(AF_INET6, SOCK_DGRAM, 0);
		return ((sd != -1) && (sd6 != -1));
	}

	virtual bool onDoReceive(Message& received){

		if((sd < 0) || (sd6<0)){
			LOGC(L_INFO, "[ResponseSender] Socket closed, I'm done.", ACTOR_COLORS);
			return true;
		}
		if (!received.isResponseSet()){
			LOGC(L_DEBUG, "[ResponseSender] Received message w/o response data set.", MESSAGING_ERROR_COLORS );
			LOGC(L_DEBUG, "[ResponseSender] " + received.toString(false), MESSAGING_ERROR_COLORS );
		}
/*
		if (!received.isSendable()){
			LOGC(L_DEBUG, "[ResponseSender] Received message w/o response data set.", MESSAGING_ERROR_COLORS );
			LOGC(L_DEBUG, "[ResponseSender] " + received.toString(false), MESSAGING_ERROR_COLORS );
		} else {
			LOGC(L_DEBUG, "DD " + received.toString(false), MESSAGING_COLORS );
		}
*/
		// set up the message content
		char buf[MESSAGE_MAX_SIZE];
		received.pack(buf);
		size_t msize = received.getDataLength(true) + MESSAGE_MIN_SIZE;

		// set up the destination address
		struct sockaddr_storage d_addr;
		received.getResponseIpSpec().pack(d_addr);
		//Utility::setIp(received.getResponseIpSpec(), &d_addr);


		int sdToUse = ((d_addr.ss_family == AF_INET) ? sd : ((d_addr.ss_family == AF_INET) ? sd6 : -1));
		if (sdToUse == -1){
			LOGC(L_ERROR, "Unsupported address family : '"+IpSpec::addrFamilyToStr(d_addr.ss_family)+"'", MESSAGING_ERROR_COLORS);
		} else {
			int retries=10;
			bool sent = false;
			do{
				int res=sendto(sdToUse, buf, msize, MSG_WAITALL, (sockaddr*)&d_addr, sizeof(struct sockaddr_storage));
				if ((size_t) res == msize){
					sent = true;
					if (SAFE_GET(System,en_LogMessaging)){
						LOGC(L_INFO, "<< "  + received.toString(), MESSAGING_COLORS );
					}
					//__SIGNAL__(RESPONSE_SENT,received);
				} else if (res < 0){
					LOGC(L_INFO, "[ResponseSender] Can't send response '" + string(strerror(errno)) + "'", MESSAGING_ERROR_COLORS );
				} else {
					LOGC(L_INFO, "[ResponseSender] Can't send response: message truncated", MESSAGING_ERROR_COLORS );
				}
				retries--;
			}while ((retries>=0) && !sent);
			if (sent && received.getAccept()){
				string data = received.getData();
				string type = received.getType();
				string rescan = received.getMetaValue("RescanStorage");
				bool full = false;
				if (!rescan.compare("yes")){
					full=true;
				}
				if (!type.compare("SHT")){
					bool reboot = strstr(data.c_str(),"RESTART")!=NULL;
					bool scram  = strstr(data.c_str(),"SCRAM")!=NULL;
					SYSTEM_SAFE(requestShutdown(reboot,scram, full));
				}
				if (!type.compare("EXT")){
					SYSTEM_SAFE(requestShutdown(false,false, false));
				}
				if (!type.compare("INI")){
					bool flushData = strstr(data.c_str(),"D")!=NULL;
					SYSTEM_SAFE(requestIni(flushData, full));
				}
			}
		}
		return false;
	}

	virtual ~ResponseSender(){}
private:
	int 				sd;
	int 				sd6;
	unsigned short 		port;
};

#endif /* RESPONSESENDER_H_ */
