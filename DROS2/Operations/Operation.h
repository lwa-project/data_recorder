// ========================= DROSv2 License preamble===========================
// Software for DROSv2 is covered jointly under GPLv3 and Boost 1.0 licenses,
// to the extent required by included Boost sources and GPL sources, and to the
// more restrictive case pertaining thereunto, as defined herebelow. Beyond those
// requirements, any code not explicitly restricted by either of thowse two license
// models shall be deemed to be licensed under the GPLv3 license and subject to
// those restrictions.
//
// Copyright 2012, Virginia Tech, University of New Mexico, and Christopher Wolfe
//
// ========================= Boost License ====================================
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
// =============================== GPL V3 ====================================
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#ifndef OPERATION_H_
#define OPERATION_H_

#include "../Common/Common.h"

#include <string>


enum OperationTimeType{INSTANT, SCHEDULED, SCHEDULED_WIN, LONGRUNNING, OTT_LONG_EXCLUSIVE};


//class Schedule;

class Operation: boost::noncopyable {
public:
	Operation(const string& type):type(type),_started(false),_done(false){
	}

	virtual ~Operation(){
	}

	// MIB interface
	virtual bool hasOpType()const{       return true;}
	virtual string getOpType()const{
		string rv = type;
		while (rv.size()<11)
			rv.push_back(' ');
		return rv;
	}

	virtual string getOpTag()const{       return "";}
	virtual string getOpFormat()const{    return "";}
	virtual string getOpFilePos()const{   return "";}
	virtual string getOpFileName()const{  return "";}
	virtual string getOpFileIndex()const{ return "";}
	virtual string getOpStart()const{     return "";}
	virtual string getOpStop()const{      return "";}
	virtual string getOpReference()const{ return "";}
	virtual bool hasOpTag()const{        return false;}
	virtual bool hasOpFormat()const{     return false;}
	virtual bool hasOpFilePos()const{    return false;}
	virtual bool hasOpFileName()const{   return false;}
	virtual bool hasOpFileIndex()const{  return false;}
	virtual bool hasOpStart()const{      return false;}
	virtual bool hasOpStop()const{ 		return false;}
	virtual bool hasOpReference()const{  return false;}

	// non virtual members
	void started(){_started=true;}
	bool isStarted()const{ return _started;}
	void done(){_done=true;}
	bool isDone()const{ return _done;}
	virtual string toString(bool full=false)const{
		char buffer[8192];
		if (full){
			sprintf(buffer,"%-11.11s %-9.9s %-17.17s %-17.17s %-32.32s %-17.17s %-193.193s %-9.9s %-47.47s",
					getOpType().c_str(),
					getOpReference().c_str(),
					getOpStart().c_str(),
					getOpStop().c_str(),
					getOpFormat().c_str(),
					getOpTag().c_str(),
					getOpFileName().c_str(),
					getOpFileIndex().c_str(),
					getOpFilePos().c_str()
			);
		} else {
			sprintf(buffer,"%-11.11s %-9.9s %-17.17s %-17.17s %-32.32s",
					getOpType().c_str(),
					getOpReference().c_str(),
					getOpStart().c_str(),
					getOpStop().c_str(),
					getOpFormat().c_str()
			);
		}
		return string(buffer);
	}
protected:
	Operation(){}

private:
	const string type;
	volatile bool _started;
	volatile bool _done;


};

#endif /* OPERATION_H_ */
