// ========================= DROSv2 License preamble===========================
// Software for DROSv2 is covered jointly under GPLv3 and Boost 1.0 licenses,
// to the extent required by included Boost sources and GPL sources, and to the
// more restrictive case pertaining thereunto, as defined herebelow. Beyond those
// requirements, any code not explicitly restricted by either of thowse two license
// models shall be deemed to be licensed under the GPLv3 license and subject to
// those restrictions.
//
// Copyright 2012, Virginia Tech, University of New Mexico, and Christopher Wolfe
//
// ========================= Boost License ====================================
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
// =============================== GPL V3 ====================================
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#ifndef SCHEDULEDOPERATION_H_
#define SCHEDULEDOPERATION_H_
#include "Operation.h"

#define SCHEDULING_WINDOW 2500

class ScheduledOperation: public Operation {
public:
	ScheduledOperation(const string& type, const size_t& reference, const TimeSlot& ts):
		Operation(type), reference(reference), ts(ts), ts_padded(Time::applyWindow(ts,SCHEDULING_WINDOW)) {
	}
	ScheduledOperation(const string& type, const size_t& reference, const TimeStamp& start, const millisecond& duration=FOREVER):
		Operation(type), reference(reference), ts(__TimeSlot(start,duration)), ts_padded(Time::applyWindow(ts,SCHEDULING_WINDOW)) {
	}
	virtual ~ScheduledOperation(){}

	// MIB interface
	virtual string getOpStart()const{
		char buf[64];
		snprintf(buf, 64, "%06lu %09lu", ts.start.MJD, ts.start.MPM);
		return string(buf);
	}
	virtual string getOpStop()const{
		if (ts.duration == FOREVER){
			return "999999 999999999";
		} else {
			TimeStamp tss=Time::addTime(ts.start,ts.duration);
			char buf[64];
			snprintf(buf, 64, "%06lu %09lu", tss.MJD, tss.MPM);
			return string(buf);
		}
	}
	virtual string getOpReference()const{
		char buf[64]; snprintf(buf, 64, "%09lu", reference);
		return string(buf);
	}
	virtual bool hasOpStart()const{      return true; }
	virtual bool hasOpStop()const{ 		 return true; }
	virtual bool hasOpReference()const{  return true; }

	//Schedule interface
	TimeSlot getTimeSlot(const bool usePadded=true)const{return (usePadded ? ts_padded : ts);}
	size_t   getReference()const{return reference;}

	virtual bool doCancel(){LOGC(L_DEBUG, string("[ScheduledOperation] ") + __FUNCTION__, SCHEDULE_COLORS);return true;}
	virtual void doWindowStart(){LOGC(L_DEBUG, string("[ScheduledOperation] ") + __FUNCTION__, SCHEDULE_COLORS);}
	virtual void doExecutionStart(){LOGC(L_DEBUG, string("[ScheduledOperation] ") + __FUNCTION__, SCHEDULE_COLORS);}
	virtual void doExecutionStop(){LOGC(L_DEBUG, string("[ScheduledOperation] ") + __FUNCTION__, SCHEDULE_COLORS);}
	virtual void doWindowStop(){LOGC(L_DEBUG, string("[ScheduledOperation] ") + __FUNCTION__, SCHEDULE_COLORS);}

protected:
	ScheduledOperation(){}

private:

	size_t   reference;
	TimeSlot ts;
	TimeSlot ts_padded;

};

#endif /* SCHEDULEDOPERATION_H_ */
