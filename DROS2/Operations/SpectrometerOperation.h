// ========================= DROSv2 License preamble===========================
// Software for DROSv2 is covered jointly under GPLv3 and Boost 1.0 licenses,
// to the extent required by included Boost sources and GPL sources, and to the
// more restrictive case pertaining thereunto, as defined herebelow. Beyond those
// requirements, any code not explicitly restricted by either of thowse two license
// models shall be deemed to be licensed under the GPLv3 license and subject to
// those restrictions.
//
// Copyright 2012, Virginia Tech, University of New Mexico, and Christopher Wolfe
//
// ========================= Boost License ====================================
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
// =============================== GPL V3 ====================================
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#ifndef SPECTROMETEROPERATION_H_
#define SPECTROMETEROPERATION_H_

#include "ScheduledOperation.h"
#include "../Data/DataFormat.h"
#include "../Streaming/FileWriter.h"
#include "../Spectrometer/DrxSpectrometer.h"
#include "../Spectrometer/Spectrometer.h"

class SpectrometerOperation: public ScheduledOperation,
		public FileWriter::EventListener {
public:
	SpectrometerOperation(
			const size_t& _reference,
			const TimeSlot& _ts,
			TicketBuffer* _buf,
			DataFormat _opFormat,
			File* _tagfile,
			size_t _size_limit,
			StokesProduct _type,
			unsigned _nFreqs,
			unsigned _nInts
		):
		ScheduledOperation("Spectrometr", _reference, _ts),
		reference(_reference),
		ts(_ts),
		opFormat(_opFormat),
		size_limit(_size_limit),
		type(_type),
		nFreqs(_nFreqs),
		nInts(_nInts),
		tagfile(_tagfile),
		writer(NULL),
		spc(NULL),
		buf(_buf),isShutdown(false),up(false){

	}

	virtual ~SpectrometerOperation(){
		if (up){
			if(writer){
				delete(writer);
				writer = NULL;
			}
			if(spc){
				delete(spc);
				spc = NULL;
			}
		}
	}

	// MIB interface
	virtual string getOpTag()const{      return tagfile->getName();    }
	virtual string getOpFormat()const{   return opFormat.getName();    }
	virtual string getOpFilePos()const{
		if (isShutdown || !up)
			return  LXS(tagfile->getSize());
		else
			return LXS(writer->getBytesWritten());
	}
	virtual bool hasOpTag()const{        return true;}
	virtual bool hasOpFormat()const{     return true;}
	virtual bool hasOpFilePos()const{    return true;}

	// scheduler interface
	virtual bool doCancel(){
		doShutdown(false);
		return true;
	}
	virtual void doWindowStart(){
		unsigned  nBlocks = (1024*6144*2)/(nFreqs*nInts);
		if (nBlocks < 8) nBlocks = 8;
		if (nBlocks > 32) nBlocks = 32;

		spc    = new (nothrow) DrxSpectrometer(nFreqs, nInts, nBlocks,type, buf);
		if (!spc){
			LOGC(L_ERROR, "[SpectrometerOperation] Failed to allocate the spectrometer plugin", ACTOR_ERROR_COLORS);
			started(); done(); return;
		}else {
			LOGC(L_INFO, "[SpectrometerOperation] spectrometer object allocated", ACTOR_COLORS);
		}
		if (!spc->isValid()){
			LOGC(L_ERROR, "[SpectrometerOperation] The spectrometer plugin was not valid; halting operation", ACTOR_ERROR_COLORS);
			delete(spc); spc=NULL; started(); done(); return;
		}else {
			LOGC(L_INFO, "[SpectrometerOperation] spectrometer plugin created!!!", ACTOR_COLORS);
		}

		writer = new (nothrow) FileWriter(this, spc, tagfile, ts, size_limit, false);
		if (!writer){
			LOGC(L_ERROR, "[SpectrometerOperation] Failed to allocate the file writer", ACTOR_ERROR_COLORS);
			delete(spc); spc=NULL; started(); done(); return;
		} else {
			LOGC(L_INFO, "[SpectrometerOperation] file writer allocated", ACTOR_COLORS);
		}

		LOGC(L_INFO, "[SpectrometerOperation] Starting plugin", ACTOR_COLORS);
		spc->start();
		LOGC(L_INFO, "[SpectrometerOperation] Starting file writer", ACTOR_COLORS);
		writer->start();
		LOGC(L_INFO, "[SpectrometerOperation] Operation started", ACTOR_COLORS);
		started();

		up = true;
	}

	virtual void doExecutionStart(){
	}

	virtual void doExecutionStop(){
		doShutdown(true);
	}
	virtual void doWindowStop(){
		done();
	}

	// FileWriter callbacks
	virtual void onFWThreadStart(FileWriter*who){
		LOGC(L_INFO, "[SpectrometerOperation] FileWriter thread started", ACTOR_COLORS);
	}
	virtual void onFWRecordStart(FileWriter*who){
		LOGC(L_INFO, "[SpectrometerOperation] FileWriter record started", ACTOR_COLORS);
	}
	virtual void onFWError(FileWriter*who){
		LOGC(L_ERROR, "[SpectrometerOperation] FileWriter error", ACTOR_ERROR_COLORS);
	}
	virtual void onFWRecordStop(FileWriter*who){
		LOGC(L_INFO, "[SpectrometerOperation] FileWriter record finished", ACTOR_COLORS);
	}
	virtual void onFWThreadStop(FileWriter*who){
		LOGC(L_INFO, "[SpectrometerOperation] FileWriter thread finished", ACTOR_COLORS);
	}


	void doShutdown(bool completed){
		SERIALIZE_ACCESS();
		if (isShutdown) return;
		LOGC(L_INFO, "[SpectrometerOperation] Starting shutdown procedure", ACTOR_COLORS);
		if (!up) {
			LOGC(L_INFO, "[SpectrometerOperation] Not up, tagging files and leaving", ACTOR_COLORS);
			tagFileMeta(false);
			isShutdown = true;
			return;
		}
		LOGC(L_INFO, "[SpectrometerOperation] Shutting down recorder", ACTOR_COLORS);
		writer->stopRecording();
		usleep(500000);

		if (writer->getState() != FWS_DONE){
			LOGC(L_INFO, "[SpectrometerOperation] Recorder did not stop automatically, aborting writer thread", ACTOR_COLORS);
			writer->doAbort();
		}
		writer->stop();
		LOGC(L_INFO, "[SpectrometerOperation] Writer thread successfully joined", ACTOR_COLORS);


		LOGC(L_INFO, "[SpectrometerOperation] Shutting down spectrometer plugin", ACTOR_COLORS);
		spc->stopReceiving();
		usleep(500000);
		spc->stopProducing();
		usleep(500000);
		if (!spc->isShutDown()){
			LOGC(L_INFO, "[SpectrometerOperation] Spectrometer plugin did not stop automatically, aborting plugin thread", ACTOR_COLORS);
			spc->doAbort();
		}
		spc->stop();
		LOGC(L_INFO, "[SpectrometerOperation] Spectrometer thread successfully joined", ACTOR_COLORS);

		tagFileMeta(completed);
		LOGC(L_INFO, "[SpectrometerOperation] Spectrometer shutdown complete", ACTOR_COLORS);

		isShutdown = true;
	}
	void tagFileMeta(bool completed){
		LOGC(L_INFO, "[SpectrometerOperation] Setting file metadata", ACTOR_COLORS);
		tagfile->setAttribute("opTag",       getOpTag());
		tagfile->setAttribute("opType",      getOpType());
		tagfile->setAttribute("opRefernece", getOpReference());
		tagfile->setAttribute("opStart",     getOpStart());
		tagfile->setAttribute("opStop",      getOpStop());
		tagfile->setAttribute("opFormat",    getOpFormat());
		tagfile->setAttribute("opFftStokes", stokesName(type));
		tagfile->setAttribute("opFftLength", LXS(nFreqs));
		tagfile->setAttribute("opIntCount",  LXS(nInts));
		tagfile->setAttribute("opComplete",  (completed) ? "YES" : "NO ");

		if (spc && spc->isValid()){
			// TODO: add counter metadata to file on close (here)
		}

	}

private:
	DECLARE_ACCESS_MUTEX();

	size_t         reference;
	TimeSlot       ts;
	DataFormat     opFormat;
	size_t         size_limit;
	StokesProduct  type;
	unsigned       nFreqs;
	unsigned       nInts;
	File*             tagfile;
	FileWriter*       writer;
	DrxSpectrometer * spc;
	TicketBuffer*     buf;
	volatile bool     isShutdown;
	volatile bool     up;
};

#endif /* SPECTROMETEROPERATION_H_ */
