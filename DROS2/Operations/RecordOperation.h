// ========================= DROSv2 License preamble===========================
// Software for DROSv2 is covered jointly under GPLv3 and Boost 1.0 licenses,
// to the extent required by included Boost sources and GPL sources, and to the
// more restrictive case pertaining thereunto, as defined herebelow. Beyond those
// requirements, any code not explicitly restricted by either of thowse two license
// models shall be deemed to be licensed under the GPLv3 license and subject to
// those restrictions.
//
// Copyright 2012, Virginia Tech, University of New Mexico, and Christopher Wolfe
//
// ========================= Boost License ====================================
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
// =============================== GPL V3 ====================================
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#ifndef RECORDOPERATION_H_
#define RECORDOPERATION_H_

#include "ScheduledOperation.h"
#include "../Streaming/SimpleRecorder.h"
#include "../Streaming/TicketBuffer.h"
#include "../Streaming/FileWriter.h"
#include "../System/File.h"
#include "../System/Time.h"
#include "../Data/DataFormat.h"


class RecordOperation: public ScheduledOperation, public FileWriter::EventListener {
public:
	RecordOperation(const size_t& _reference, const TimeSlot& _ts, TicketBuffer* _buf, DataFormat _opFormat, File* _tagfile, size_t _size_limit, bool _doSidCheck):
		ScheduledOperation("Record", _reference, _ts),
		writer(this, _buf, _tagfile, _ts, _size_limit, _doSidCheck),
		opFormat(_opFormat),
		tagfile(_tagfile),
		buf(_buf)
		{
	}
	virtual ~RecordOperation(){}





	// MIB interface
	virtual string getOpTag()const{      return tagfile->getName();    }
	virtual string getOpFormat()const{   return opFormat.getName();    }
	virtual string getOpFilePos()const{  return LXS(writer.getBytesWritten()); }
	virtual bool hasOpTag()const{        return true;}
	virtual bool hasOpFormat()const{     return true;}
	virtual bool hasOpFilePos()const{    return true;}

	// scheduler interface
	virtual bool doCancel(){
		__doExecutionStop(true);
		done();
		return true;
	}
	virtual void doWindowStart(){
		started();
		LOGC(L_INFO, "[RECORD] Starting recorder", ACTOR_COLORS);
		writer.start();
		LOGC(L_INFO, "[RECORD] Recorder started", ACTOR_COLORS);
	}
	virtual void doExecutionStart(){}
	virtual void doExecutionStop(){
		__doExecutionStop(false);
	}
	virtual void __doExecutionStop(bool cancelled){
		LOGC(L_INFO, "[RECORD] Waiting on recorder cleanup", ACTOR_COLORS);
		if (writer.getState() != FWS_DONE){
			writer.stopRecording();
			usleep(500000);
			if (writer.getState() != FWS_DONE){
				writer.doAbort();
			}
		}
		writer.stop();
		tagFileMeta(!cancelled);
		LOGC(L_INFO, "[RECORD] Recorder cleanup complete", ACTOR_COLORS);

	}
	virtual void doWindowStop(){
		done();
	}

	virtual void onFWThreadStart(FileWriter*who){
		LOGC(L_INFO, "[RECORD] FileWriter thread started", ACTOR_COLORS);
	}
	virtual void onFWRecordStart(FileWriter*who){
		LOGC(L_INFO, "[RECORD] FileWriter record started", ACTOR_COLORS);
	}
	virtual void onFWError(FileWriter*who){
		LOGC(L_ERROR, "[RECORD] FileWriter error", ACTOR_ERROR_COLORS);
	}
	virtual void onFWRecordStop(FileWriter*who){
		LOGC(L_INFO, "[RECORD] FileWriter record finished", ACTOR_COLORS);
	}
	virtual void onFWThreadStop(FileWriter*who){
		LOGC(L_INFO, "[RECORD] FileWriter thread finished", ACTOR_COLORS);
		tagFileMeta(false);
	}
	virtual void tagFileMeta(bool complete){
		tagfile->setAttribute("opTag",       getOpTag());
		tagfile->setAttribute("opType",      getOpType());
		tagfile->setAttribute("opRefernece", getOpReference());
		tagfile->setAttribute("opStart",     getOpStart());
		tagfile->setAttribute("opStop",      getOpStop());
		tagfile->setAttribute("opFormat",    getOpFormat());
		tagfile->setAttribute("opComplete",  (complete ? "YES" : "NO "));
	}
private:
	FileWriter     writer;
	DataFormat     opFormat;
	File*          tagfile;
	TicketBuffer*  buf;



};

#endif /* RECORDOPERATION_H_ */
