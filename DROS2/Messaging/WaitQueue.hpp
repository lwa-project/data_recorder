// ========================= DROSv2 License preamble===========================
// Software for DROSv2 is covered jointly under GPLv3 and Boost 1.0 licenses,
// to the extent required by included Boost sources and GPL sources, and to the
// more restrictive case pertaining thereunto, as defined herebelow. Beyond those
// requirements, any code not explicitly restricted by either of thowse two license
// models shall be deemed to be licensed under the GPLv3 license and subject to
// those restrictions.
//
// Copyright 2012, Virginia Tech, University of New Mexico, and Christopher Wolfe
//
// ========================= Boost License ====================================
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
// =============================== GPL V3 ====================================
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.


#ifndef WAITQUEUE_H_
#define WAITQUEUE_H_
#include "../Primitives/StdTypes.h"



#include <boost/thread/thread.hpp>
#include <boost/thread/mutex.hpp>
#include <boost/bind.hpp>
#include <boost/thread/locks.hpp>
#include <boost/thread/condition_variable.hpp>
#include <boost/utility.hpp>
#include "WaitQueueManager.h"
#include "../System/Time.h"
#include "../System/Log.h"
#include "ObjectQueue.h"


#define DEFAULT_WAIT_TIME 5 /* 5ms */


#define B_RM_SL boost::recursive_timed_mutex::scoped_lock

#define ENQUEUE(...)       enqueue2(__VA_ARGS__)
#define DEQUEUE(...)       dequeue0(__VA_ARGS__)
#define DEQUEUE_TIMED(...) dequeueTimed2(__VA_ARGS__)


template <class T>
class WaitQueue : boost::noncopyable{
public:
	WaitQueue(string name, size_t pollPeriod = 10000ll):_oq(),name(name),pollPeriod(pollPeriod){
		LOGC(L_DEBUG, "WaitQueue '"+name+"' constructed.",OBJECT_COLORS);
		WaitQueueManager::getInstance()->registerQueue(this->name,this);
		if (pollPeriod < 500ll){
			pollPeriod = 500ll;
		}
	}

	virtual ~WaitQueue(){
		WaitQueueManager::getInstance()->unRegisterQueue(name);
		LOGC(L_DEBUG, "WaitQueue '"+name+"' destroyed.",OBJECT_COLORS);
	}

	void enqueue ( const T& toQueue){
		ENQUEUE(toQueue);
	}
	T dequeue(){
		return DEQUEUE();
	}
	bool dequeueTimed(T& toDequeue, millisecond wait){
		return DEQUEUE_TIMED(toDequeue,wait);
	}


	bool notEmpty()const{ return _oq.notEmpty(); }
	bool empty()const{    return !_oq.empty();   }

	const string getName()const       {return name;}
	const size_t getPollPeriod()const {return pollPeriod;};
private:
	void enqueue1 ( const T& toQueue){
		_oq.insert(toQueue);
	}
	void enqueue2 ( const T& toQueue){
		boost::timed_mutex::scoped_lock lock(tmtx);
		_oq.insert(toQueue);
		cond.notify_one();
	}

	T dequeue0(){
		// do poll+sleep because boost condition variables are unreliable
		T toDequeue;
		while (!_oq.remove(toDequeue)){
			usleep(pollPeriod); // default = 10ms sleep
		}
		return toDequeue;
	}

	bool dequeueTimed1(T& toDequeue, millisecond wait){
		if (wait == FOREVER){
			toDequeue = dequeue();
			return true;
		} else {
			bool      result = false;
			TimeStamp ts = Time::addTime(Time::now(),wait);
			while (
					(Time::compareTimestamps(Time::now(),ts) == -1) &&
					(!(result = _oq.remove(toDequeue)))
			){
				usleep(pollPeriod); // default = 10ms sleep
			}
			return result;
		}
	}
	bool dequeueTimed2(T& toDequeue, millisecond wait){
		if (wait == FOREVER){
			toDequeue = dequeue();
			return true;
		} else {
			bool result = false;
			boost::system_time const to=boost::get_system_time() + boost::posix_time::milliseconds(wait);
			boost::timed_mutex::scoped_lock lock(tmtx,to);
			if(cond.timed_wait(lock,to,boost::bind(&WaitQueue::notEmpty,this))){
				result = _oq.remove(toDequeue);
			}
			return result;
		}
	}


private:
	ObjectQueue<T> _oq;
	string name;
	size_t pollPeriod;
	boost::condition_variable_any cond;
	boost::timed_mutex tmtx;
};


#endif /* WAITQUEUE_H_ */
