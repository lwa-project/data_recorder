// ========================= DROSv2 License preamble===========================
// Software for DROSv2 is covered jointly under GPLv3 and Boost 1.0 licenses,
// to the extent required by included Boost sources and GPL sources, and to the
// more restrictive case pertaining thereunto, as defined herebelow. Beyond those
// requirements, any code not explicitly restricted by either of thowse two license
// models shall be deemed to be licensed under the GPLv3 license and subject to
// those restrictions.
//
// Copyright 2012, Virginia Tech, University of New Mexico, and Christopher Wolfe
//
// ========================= Boost License ====================================
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
// =============================== GPL V3 ====================================
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#ifndef QUEUEDSUBSCRIBER_H_
#define QUEUEDSUBSCRIBER_H_

#include "TicketBuffer.h"
////////////////////////////////////////////////////////
	// The Queued Subscriber automatically queues tickets
	// for the consumer to asynchronously grab
	////////////////////////////////////////////////////////
	class QueuedSubscriber: public TicketBuffer::Subscriber{
	public:
		QueuedSubscriber(string name):TicketBuffer::Subscriber(name),disconnected(false),tickets(){
		}
		virtual ~QueuedSubscriber(){
			// onReset is virtual, and we don't want to trigger anything in derived classes, so repeat code here
			__onReset();
		}

		virtual void onTicketAvailable(TicketBuffer::Ticket* ticket){
			SERIALIZE_ACCESS();
			if (disconnected) {
				//LOGC(L_DEBUG, "[QueuedSubscriber:"+this->getSubscriberName()+"] <TICKET AVAIL:disconnected>", OPERATION_COLORS);				ticket->put();
				onReset();
				return;
			}
			//LOGC(L_DEBUG, "[QueuedSubscriber:"+this->getSubscriberName()+"] <TICKET AVAIL:connected>", OPERATION_COLORS);				ticket->put();
			tickets.push_back(ticket);
		}

		TicketBuffer::Ticket* getNext(){
			SERIALIZE_ACCESS();
			if (disconnected) {
				//LOGC(L_DEBUG, "[QueuedSubscriber:"+this->getSubscriberName()+"] <GET NEXT:disconnected>", OPERATION_COLORS);
				onReset();
				return NULL;
			}

			if (tickets.empty()){
				//LOGC(L_DEBUG, "[QueuedSubscriber:"+this->getSubscriberName()+"] <GET NEXT:empty>", OPERATION_COLORS);
				return NULL;
			}
			//LOGC(L_DEBUG, "[QueuedSubscriber:"+this->getSubscriberName()+"] <GET NEXT:not-empty>", OPERATION_COLORS);
			TicketBuffer::Ticket* rv = tickets.front();
			tickets.pop_front();
			return rv;
		}
		virtual void onReset(){
			SERIALIZE_ACCESS();
			//disconnected=true;
			__onReset();
		}


		virtual void onNewGeometry(
				const size_t& size,
				const size_t& framesize,
				const size_t& framesPerTicket){
			// subscriber will receive this once immediately after subscribing before any tickets are given
			// and thereafter, whenever a reset is triggered, and after all tickets have been returned
		}
		virtual void notifyDisconnected(){
			disconnected=true;
		}

	private:
		volatile bool disconnected;
		deque<TicketBuffer::Ticket*> tickets;
		DECLARE_ACCESS_MUTEX();

		void __onReset(){
			while(!tickets.empty()){
				TicketBuffer::Ticket* tmp = tickets.front();
				tickets.pop_front();
				tmp->put();
			}
		}
	};
#endif /* QUEUEDSUBSCRIBER_H_ */
