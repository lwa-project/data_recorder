// ========================= DROSv2 License preamble===========================
// Software for DROSv2 is covered jointly under GPLv3 and Boost 1.0 licenses,
// to the extent required by included Boost sources and GPL sources, and to the
// more restrictive case pertaining thereunto, as defined herebelow. Beyond those
// requirements, any code not explicitly restricted by either of thowse two license
// models shall be deemed to be licensed under the GPLv3 license and subject to
// those restrictions.
//
// Copyright 2012, Virginia Tech, University of New Mexico, and Christopher Wolfe
//
// ========================= Boost License ====================================
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
// =============================== GPL V3 ====================================
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#ifndef OPSQUEUE_H_
#define OPSQUEUE_H_

#include "../Primitives/StdTypes.h"
#include "../Primitives/Patterns.h"
#include "../Operations/Operation.h"
#include "../Operations/ScheduledOperation.h"
#include "../Operations/OpIdle.h"
#include "../Threading/LockHelper.h"
#include "../Threading/GenericThread.h"
#include "../Threading/Lockable.h"

class OpsQueue {
public:
	typedef deque<ScheduledOperation*> OpQueue;
	typedef Lockable< OpQueue >        LockOpQueue;

	OpsQueue(){

	}
	virtual ~OpsQueue(){

	}

	ScheduledOperation* insert(ScheduledOperation* toInsert){
		_ops.lock();
		//LOGC(L_WARNING, "insert: start search", ACTOR_ERROR_COLORS);
		if (_ops.empty()){
			_ops.push_front(toInsert);
			_ops.unlock();
			//LOGC(L_WARNING, "insert: end search - inserted empty", ACTOR_ERROR_COLORS);
			return NULL;
		}

		TimeSlot ts_to_insert = toInsert->getTimeSlot(true);
		OpQueue::iterator it    = _ops.begin();
		OpQueue::iterator end   = _ops.end();


		while (it != end){
			ScheduledOperation*  op_next = *it;
			TimeSlot             ts_next = op_next->getTimeSlot(true);
			switch (Time::compare(ts_to_insert,ts_next)){
				case 1:
					++it;
					break;
				case -1:
					_ops.insert(it, toInsert);
					_ops.unlock();
					//LOGC(L_WARNING, "insert: end search - inserted between", ACTOR_ERROR_COLORS);
					return NULL;
				case 0:
				default:
					_ops.unlock();
					//LOGC(L_WARNING, "insert: end search - not inserted - conflict", ACTOR_ERROR_COLORS);
					return op_next;
			}
		}
		// if we got here, then everything in the list was before this, and it still points to end()
		_ops.insert(it, toInsert);
		_ops.unlock();
		//LOGC(L_WARNING, "insert: end search - inserted end", ACTOR_ERROR_COLORS);
		return NULL;
	}

	ScheduledOperation* find_conflict(TimeSlot ts){
		_ops.lock();
		LOGC(L_WARNING, "find_conflict: start search", ACTOR_ERROR_COLORS);
		OpQueue::iterator it = _ops.begin();
		while (it != _ops.end()){
			ScheduledOperation* tmp = *it;
			if (tmp != NULL){
				TimeSlot ts_ = tmp->getTimeSlot(true);
				if ( (Time::overlaps(ts,ts_))){
					/*
					LOGC(L_WARNING, "OVERLAPS( "
						  "[" + LXS( ts.start.MJD) + ":" + LXS( ts.start.MJD) + "+" + LXS( ts.start.MJD) + "] to "
						  "[" + LXS(ts_.start.MJD) + ":" + LXS(ts_.start.MJD) + "+" + LXS(ts_.start.MJD) + "] ) = true"
					, ACTOR_ERROR_COLORS);
					*/
					// found; return
					_ops.unlock();
					return tmp;
				}/* else {
					LOGC(L_WARNING, "OVERLAPS( "
						  "[" + LXS( ts.start.MJD) + ":" + LXS( ts.start.MJD) + "+" + LXS( ts.start.MJD) + "] to "
						  "[" + LXS(ts_.start.MJD) + ":" + LXS(ts_.start.MJD) + "+" + LXS(ts_.start.MJD) + "] ) = false"
					, ACTOR_ERROR_COLORS);
				}*/
			}
			++it;
		}
		LOGC(L_WARNING, "find_conflict: end search", ACTOR_ERROR_COLORS);
		_ops.unlock();
		return NULL;
	}

	ScheduledOperation* find_by_index(int i){
		int cur=0;
		_ops.lock();
		OpQueue::iterator it = _ops.begin();
		while (it != _ops.end()){
			ScheduledOperation* tmp = *it;
			if ( (tmp != NULL) && (cur == i)){
				// found; return
				_ops.unlock();
				return tmp;
			}
			++cur;
			++it;
		}
		_ops.unlock();
		return NULL;
	}

	ScheduledOperation* find_by_ref(size_t reference){
		_ops.lock();
		OpQueue::iterator it = _ops.begin();
		while (it != _ops.end()){
			ScheduledOperation* tmp = *it;
			if ( (tmp != NULL) && (tmp->getReference() == reference)){
				// found; return
				_ops.unlock();
				return tmp;
			}
			++it;
		}
		_ops.unlock();
		return NULL;
	}

	ScheduledOperation* remove_by_ref(size_t reference){
		_ops.lock();
		OpQueue::iterator it = _ops.begin();
		while (it != _ops.end()){
			ScheduledOperation* tmp = *it;
			if ( (tmp != NULL) && (tmp->getReference() == reference)){
				// found; remove
				_ops.erase(it);
				_ops.unlock();
				return tmp;
			}
			++it;
		}
		_ops.unlock();
		return NULL;
	}

	ScheduledOperation* front(){
		_ops.lock();
		ScheduledOperation* rv = _ops.empty() ? NULL : _ops.front();
		_ops.unlock();
		return rv;
	}

	ScheduledOperation* pop_front(){
		_ops.lock();
		if (_ops.empty()){
			_ops.unlock();
			return NULL;
		} else {
			ScheduledOperation* rv = _ops.front();
			_ops.pop_front();
			_ops.unlock();
			return rv;
		}
	}

	bool isEmpty(){
		_ops.lock();
		bool rv = _ops.empty();
		_ops.unlock();
		return rv;
	}

	size_t getSize(){
		_ops.lock();
		size_t rv = _ops.size();
		_ops.unlock();
		return rv;
	}

/*


	bool          isTimeSlotFree(TimeSlot ts, ScheduledOperation*& conflict_op){
		ScheduledOperation* tmp = find_conflict(ts);
		if (tmp != NULL){
			conflict_op = tmp;
			return false;
		} else {
			return true;
		}
	}

	bool          scheduleOperation(ScheduledOperation* op, ScheduledOperation*& conflict_op){

	}

	bool          cancelOperation(size_t reference, string& comment);

	int           getScheduleEntryCount(){
		_ops.lock();
		int rv = _ops.size();
		_ops.unlock();
		return rv;
	}

	string        getScheduleEntry(int i, bool full=false);

*/
private:
	LockOpQueue _ops;

};


#endif /* OPSQUEUE_H_ */

