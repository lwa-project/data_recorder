// ========================= DROSv2 License preamble===========================
// Software for DROSv2 is covered jointly under GPLv3 and Boost 1.0 licenses,
// to the extent required by included Boost sources and GPL sources, and to the
// more restrictive case pertaining thereunto, as defined herebelow. Beyond those
// requirements, any code not explicitly restricted by either of thowse two license
// models shall be deemed to be licensed under the GPLv3 license and subject to
// those restrictions.
//
// Copyright 2012, Virginia Tech, University of New Mexico, and Christopher Wolfe
//
// ========================= Boost License ====================================
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
// =============================== GPL V3 ====================================
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.



#ifndef HDDINFO_H_
#define HDDINFO_H_
#include "Shell.h"

#include <boost/algorithm/string.hpp>
#include <string.h>
#include "../Primitives/StdTypes.h"

#define HDD_CACHE_TIME 60000

class HddInfo {
public:
	static const string SHL_GET_DEVICES;
	static const string SHL_GET_RAID_DEVICES;

	static unsigned getDeviceCount(){
		Result r = Shell::run(SHL_GET_DEVICES,true,HDD_CACHE_TIME);
		vector<string> devids;
		boost::split(devids,r.output,boost::is_any_of("\n\t "));
		return devids.size();
	}

	static string getDeviceLabel(unsigned devno){
		Result r = Shell::run(SHL_GET_DEVICES,true,HDD_CACHE_TIME);
		vector<string> devids;
		boost::split(devids,r.output,boost::is_any_of("\n\t "));
		if (devno < devids.size())
			return devids[devno];
		else
			return "";
	}

	static int getDeviceTemperature(unsigned devno){
		Result r = Shell::run(SHL_GET_DEVICES,true,HDD_CACHE_TIME);
		vector<string> devids;
		boost::split(devids,r.output,boost::is_any_of("\n\t "));
		if (devno < devids.size()){
			cout << "Issue command: '"+__getTempCommand(devids[devno])+"'\n";
			Result r = Shell::run(__getTempCommand(devids[devno]),true,HDD_CACHE_TIME);
			return atoi(r.output.c_str());
		} else {
			return -999999;
		}
	}

	static unsigned getRaidCount(){
		Result r = Shell::run(SHL_GET_RAID_DEVICES,true,HDD_CACHE_TIME);
		vector<string> temps;
		boost::split(temps,r.output,boost::is_any_of("\n\t "));
		return temps.size();
	}

	static string getRaidLabel(unsigned devno){
		Result r = Shell::run(SHL_GET_RAID_DEVICES,true,HDD_CACHE_TIME);
		vector<string> devids;
		boost::split(devids,r.output,boost::is_any_of("\n\t "));
		if (devno < devids.size())
			return devids[devno];
		else
			return "";
	}


private:
	static string __getTempCommand(string devname){
		return "smartctl -A " + devname + " | grep ' Temp' | nawk '{print $4}' | tr -d '\\n' | sed 's/\\s*$//g'";
	}
	HddInfo();
	virtual ~HddInfo();
};

#endif /* HDDINFO_H_ */
