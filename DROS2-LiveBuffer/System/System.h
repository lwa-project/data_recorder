// ========================= DROSv2 License preamble===========================
// Software for DROSv2 is covered jointly under GPLv3 and Boost 1.0 licenses,
// to the extent required by included Boost sources and GPL sources, and to the
// more restrictive case pertaining thereunto, as defined herebelow. Beyond those
// requirements, any code not explicitly restricted by either of thowse two license
// models shall be deemed to be licensed under the GPLv3 license and subject to
// those restrictions.
//
// Copyright 2012, Virginia Tech, University of New Mexico, and Christopher Wolfe
//
// ========================= Boost License ====================================
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
// =============================== GPL V3 ====================================
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#ifndef SYSTEM_H_
#define SYSTEM_H_
#include "../Primitives/EnumTypes.h"
#include "../Primitives/StdTypes.h"
#include "../Primitives/Patterns.h"
#include "Config.h"
//#include "Storage.h"

// forward declare actors
class ResponseSender;
class MessageProcessor;
class MessageListener;
class Receiver;
class Transmitter;
class Schedule;
class Storage;
class TicketBuffer;
class LiveBuffer;

// define system states
#define E_SS      SystemState
#define E_SS_VALS (SysUninit)(SysBooting)(SysOperational)(SysMaintenance)(SysShuttingDown)
MAKE_ENUM(E_SS, E_SS_VALS);
DECL_ENUM_STR(E_SS);

// define some resource requirement flags

typedef size_t Requirements;
#define RR_STO_DOWN      0x00000001
#define RR_STO_UP        0x00000002
#define RR_STO_INT       0x00000004
#define RR_STO_EXT       0x00000008
#define RR_SCH_EMPTY     0x00000010
#define RR_SCH_NOT_EMPTY 0x00000020


class System {
///////////////////////////////////////////////////////////////////
// static interface
///////////////////////////////////////////////////////////////////
public:
	SINGLETON_CLASS_HEADER_PUBLIC(System);
private:
	SINGLETON_CLASS_HEADER_PRIVATE(System);
	static bool initialStorageScanCompleted;
	static bool rebootStorageScanFull;
	static bool asynchStorageScanFull;

///////////////////////////////////////////////////////////////////
// static interface to wrap object functions
///////////////////////////////////////////////////////////////////
public:
	SAFE_STATIC_GETTER(System, string, getSubsystemId,   "DRx"     );
	SAFE_STATIC_GETTER(System, string, getCurrentStatus, "Shutdwn" );
	SAFE_STATIC_GETTER(System, bool,   en_LogMessaging,  false     );
	static void  notifyFatalError(string who, string what);

///////////////////////////////////////////////////////////////////
// object interface
///////////////////////////////////////////////////////////////////
public:
	bool Run();// runs until the system needs to be shutdown, ini'd, etc. return val indicates whether it should be run again.
	string getSubsystemId();
	string getCurrentStatus();
	string getInfo();
	string getVersion();
	bool   en_LogMessaging();
	void   requestShutdown(bool restart, bool scram, bool rescanStorage);
	void   requestIni(bool flushData, bool rescanStorage);
	bool stateCheck(Requirements r, bool& accept, string& comment);
	void     setDefaultStorage(string arraySelect, bool& accept, string& comment);
	Storage* getDefaultStorage(bool& accept, string& comment);
	Storage* getAlternateStorage(StorageType st, const string& arraySelect, bool& accept, string& comment);
	Schedule* getSchedule(bool& accept, string& comment);
	Receiver* getReceiver(bool& accept, string& comment);
	void requestUp(bool& accept, string& comment);
	void requestDown(bool& accept, string& comment, bool full);
	TicketBuffer* getRxBuf() const {return rxbuf;}
	LiveBuffer* get_live_buffer()const {return live_buf;}
	void handleSignal(int sig);

	static bool handleException(std::exception* e);





private:
	//void spectest();
	void __boot();
	void __run();
	void __shutdown();
	void __scanSystemState();


	ResponseSender*   rs;
	MessageProcessor* mp;
	MessageListener*  ml;
	Schedule*         sch;
	Storage*          defaultDRSU;
	Receiver*         rx;
	Transmitter*      tx;
	TicketBuffer*     rxbuf;
	LiveBuffer*       live_buf;
	SystemState       state;



	volatile bool   _logMessaging;
	volatile bool   _shutdownRequested;
	volatile bool   _scramRequested;
	volatile bool   _restartRequested;
	volatile bool   _iniRequested;
	volatile bool   _iniFlushData;
	volatile bool   _fatal_error;



	DECLARE_ACCESS_MUTEX();

};
#define SYSTEM_SAFE(function_call) \
	if(System::get()!=NULL){System::get()->function_call;}else LOGC(L_ERROR,"[System] Safe Call failed with no instance" #function_call, ACTOR_ERROR_COLORS)

#define SYSTEM_SAFE2(rv, function_call, def) \
	if(System::get()!=NULL){rv = System::get()->function_call;}else{LOGC(L_ERROR,"[System] Safe Call failed with no instance" #function_call, ACTOR_ERROR_COLORS);rv=def;}


#endif /* SYSTEM_H_ */
