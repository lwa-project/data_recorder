// ========================= DROSv2 License preamble===========================
// Software for DROSv2 is covered jointly under GPLv3 and Boost 1.0 licenses,
// to the extent required by included Boost sources and GPL sources, and to the
// more restrictive case pertaining thereunto, as defined herebelow. Beyond those
// requirements, any code not explicitly restricted by either of thowse two license
// models shall be deemed to be licensed under the GPLv3 license and subject to
// those restrictions.
//
// Copyright 2012, Virginia Tech, University of New Mexico, and Christopher Wolfe
//
// ========================= Boost License ====================================
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
// =============================== GPL V3 ====================================
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#ifndef CONFIG_H_
#define CONFIG_H_

#include <boost/program_options.hpp>
#include <boost/foreach.hpp>
#include <boost/assign/std/vector.hpp>
#include <unistd.h>
#include <stdlib.h>
#include <string.h>
#include <stdlib.h>
#include <boost/thread/mutex.hpp>
#include <boost/thread/recursive_mutex.hpp>
#include "../Primitives/StdTypes.h"
#include "../Primitives/Patterns.h"

#include "Log.h"

// the preferered config access macro
#define CONF_GET(x)   SAFE_GET(Config,BOOST_PP_CAT(get,x))
#define CONF_SET(x,v) SAFE_SET(Config,BOOST_PP_CAT(set,x),v)




using namespace boost::program_options;
using namespace boost::assign;


//#define TEST_OP_SPEC_OR_DIE(X) if (!vm.count(X)) {cout << "Error: missing configuration option '"<<X<<"'\n"; exit(-1);}
//#define ASSIGN_FROM_MAP(v,t) v=vm[#v].as<t>()
#define DEFAULT_CONFIG_FILE "/LWA/config/defaults_v2.cfg"
#define GETTER_NAME(var) BOOST_PP_CAT(get,var)
#define SETTER_NAME(var) BOOST_PP_CAT(set,var)
#define MAKE_GETTER(var,type) const type get##var(){SERIALIZE_ACCESS(); return var;}
#define MAKE_SETTER(var,type) void set##var(const type& val){SERIALIZE_ACCESS(); annotateChange(#var,var,val); var = val; writeConfig();}
#define GETTER_AND_SETTER(var, type)  \
	MAKE_GETTER(var, type) 		      \
	MAKE_SETTER(var, type)


#define SHOW_CONFIG_VAL(var) cout << #var << string((30 - string(#var).size()),' ') << get##var() << endl

class Config{
public:
	SAFE_STATIC_GETTER(Config, string,          GETTER_NAME(MyReferenceDesignator),   "DRx");
	SAFE_STATIC_GETTER(Config, string,          GETTER_NAME(SelfIp),                  "127.0.0.1");
	SAFE_STATIC_GETTER(Config, string,          GETTER_NAME(TimeAuthority),           "10.1.1.50");
	SAFE_STATIC_GETTER(Config, string,          GETTER_NAME(SerialNumber),            "Unspecified");
	SAFE_STATIC_GETTER(Config, string,          GETTER_NAME(ArraySelect),             "1");
	SAFE_STATIC_GETTER(Config, unsigned short,  GETTER_NAME(MessageInPort),           0);
	SAFE_STATIC_GETTER(Config, unsigned short,  GETTER_NAME(MessageOutPort),          0);
	SAFE_STATIC_GETTER(Config, unsigned short,  GETTER_NAME(DataInPort),              0);

	SAFE_STATIC_SETTER(Config, string,          SETTER_NAME(MyReferenceDesignator));
	SAFE_STATIC_SETTER(Config, string,          SETTER_NAME(SelfIp));
	SAFE_STATIC_SETTER(Config, string,          SETTER_NAME(TimeAuthority));
	SAFE_STATIC_SETTER(Config, string,          SETTER_NAME(SerialNumber));
	SAFE_STATIC_SETTER(Config, string,          SETTER_NAME(ArraySelect));
	SAFE_STATIC_SETTER(Config, unsigned short,  SETTER_NAME(MessageInPort));
	SAFE_STATIC_SETTER(Config, unsigned short,  SETTER_NAME(MessageOutPort));
	SAFE_STATIC_SETTER(Config, unsigned short,  SETTER_NAME(DataInPort));

public:
	SINGLETON_CLASS_HEADER_PUBLIC(Config);
	void  readConfig();
	void  writeConfig();

	GETTER_AND_SETTER(MyReferenceDesignator, string)
	GETTER_AND_SETTER(SelfIp,                string)
	GETTER_AND_SETTER(TimeAuthority,         string)
	GETTER_AND_SETTER(SerialNumber,          string)
	GETTER_AND_SETTER(ArraySelect,           string)
	GETTER_AND_SETTER(MessageInPort,         unsigned short)
	GETTER_AND_SETTER(MessageOutPort,        unsigned short)
	GETTER_AND_SETTER(DataInPort,            unsigned short)

private:
	void annotateChange(string variable, string cur, string next){
		LOGC(L_INFO, "Configuration change: " +variable+ " changed from '" + cur + "' to '" + next + "'", CONFIG_COLORS );

	}
	void annotateChange(string variable, unsigned short cur, unsigned short next){
		LOGC(L_INFO, "Configuration change: " +variable+ " changed from '" + LXS(cur) + "' to '" + LXS(next) + "'", CONFIG_COLORS );
	}

	SINGLETON_CLASS_HEADER_PRIVATE(Config);
	DECLARE_ACCESS_MUTEX();
	string MyReferenceDesignator;
	string SelfIp;
	string TimeAuthority;
	string SerialNumber;
	string ArraySelect;
	unsigned short int MessageInPort;
	unsigned short int MessageOutPort;
	unsigned short int DataInPort;
};

#endif /* CONFIG_H_ */
