// ========================= DROSv2 License preamble===========================
// Software for DROSv2 is covered jointly under GPLv3 and Boost 1.0 licenses,
// to the extent required by included Boost sources and GPL sources, and to the
// more restrictive case pertaining thereunto, as defined herebelow. Beyond those
// requirements, any code not explicitly restricted by either of thowse two license
// models shall be deemed to be licensed under the GPLv3 license and subject to
// those restrictions.
//
// Copyright 2012, Virginia Tech, University of New Mexico, and Christopher Wolfe
//
// ========================= Boost License ====================================
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
// =============================== GPL V3 ====================================
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.


#ifndef COMMONICD_H_
#define COMMONICD_H_
#include "../Primitives/StdTypes.h"


#define MESSAGE_MAX_SIZE			      8192l

#define FS_DESTINATION     3l
#define FS_SENDER          3l
#define FS_TYPE            3l
#define FS_REFERENCE       9l
#define FS_DATALENGTH      4l
#define FS_MJD             6l
#define FS_MPM             9l
#define FS_IGNORED         1l
#define MESSAGE_MIN_SIZE   (FS_DESTINATION + FS_SENDER + FS_TYPE + FS_REFERENCE + FS_DATALENGTH + FS_MJD + FS_MPM + FS_IGNORED)
#define FS_DATA            (MESSAGE_MAX_SIZE - MESSAGE_MIN_SIZE)
#define RFS_ACCEPT         1l
#define RFS_STATUS         7l
#define RESPONSE_MIN_SIZE (MESSAGE_MIN_SIZE + RFS_ACCEPT + RFS_STATUS)
#define RFS_DATA          (FS_DATA - (RFS_ACCEPT+RFS_STATUS))

#define FO_DESTINATION   0
#define FO_SENDER        (FO_DESTINATION + FS_DESTINATION)
#define FO_TYPE          (FO_SENDER      + FS_SENDER)
#define FO_REFERENCE     (FO_TYPE        + FS_TYPE)
#define FO_DATALENGTH    (FO_REFERENCE   + FS_REFERENCE)
#define FO_MJD           (FO_DATALENGTH  + FS_DATALENGTH)
#define FO_MPM           (FO_MJD         + FS_MJD)
#define FO_IGNORED       (FO_MPM         + FS_MPM)
#define FO_DATA          (FO_IGNORED     + FS_IGNORED)

#define RFO_ACCEPT       FO_DATA
#define RFO_STATUS       (RFO_ACCEPT + RFS_ACCEPT)
#define RFO_DATA         (RFO_STATUS + RFS_STATUS)


typedef struct __PackedMessage {
	union {
		char binary [MESSAGE_MAX_SIZE];
		struct {
			char destination [FS_DESTINATION];
			char sender      [FS_SENDER];
			char type        [FS_TYPE];
			char reference   [FS_REFERENCE];
			char dataLength  [FS_DATALENGTH];
			char MJD         [FS_MJD];
			char MPM         [FS_MPM];
			char ignored     [FS_IGNORED];
			union {
				char messageData        [FS_DATA];
				struct {
					char r_accept  [RFS_ACCEPT];
					char r_status  [RFS_STATUS];
					char r_comment [RFS_DATA];
				} responseData;
			} data;
		};
	};
}__attribute__((packed)) PackedMessage;

#include <string>
#include <cassert>
#include "../Threading/LockHelper.h"
#include <cstdio>

class CommonICD{
public:
	static bool   _validate(PackedMessage * m, size_t s){
		SERIALIZE_ACCESS_ST();
		assert(m!=NULL);
		if (s<MESSAGE_MIN_SIZE) return false;
		if (s>MESSAGE_MAX_SIZE) return false;
		for (size_t i=0; i<FO_IGNORED; i++){
			if (!isalnum(m->binary[i]) && (m->binary[i] != ' ')) return false;
		}
		for (size_t i=(FO_IGNORED+1); i<s; i++){
			if (!isprint(m->binary[i])) return false;
		}
		return true;
	}

	static string _destination(PackedMessage * m){
		SERIALIZE_ACCESS_ST();
		assert(m!=NULL);
		return string(&m->destination[0],FS_DESTINATION);
	}

	static string _sender(PackedMessage * m){
		SERIALIZE_ACCESS_ST();
		assert(m!=NULL);
		return string(&m->sender[0],FS_SENDER);
	}

	static string _type(PackedMessage * m){
		SERIALIZE_ACCESS_ST();
		assert(m!=NULL);
		return string(&m->type[0],FS_TYPE);
	}

	static size_t _reference(PackedMessage * m){
		SERIALIZE_ACCESS_ST();
		assert(m!=NULL);
		return strtoul(string(&m->reference[0],FS_REFERENCE).c_str(),NULL,10);

	}

	static size_t _datalength(PackedMessage * m){
		SERIALIZE_ACCESS_ST();
		assert(m!=NULL);
		return strtoul(string(&m->dataLength[0],FS_DATALENGTH).c_str(),NULL,10);

	}

	static size_t _mjd(PackedMessage * m){
		SERIALIZE_ACCESS_ST();
		assert(m!=NULL);
		return strtoul(string(&m->MJD[0],FS_MJD).c_str(),NULL,10);
	}

	static size_t _mpm(PackedMessage * m){
		SERIALIZE_ACCESS_ST();
		assert(m!=NULL);
		return strtoul(string(&m->MPM[0],FS_MPM).c_str(),NULL,10);
	}

	static string _data(PackedMessage * m){
		SERIALIZE_ACCESS_ST();
		assert(m!=NULL);
		size_t datalen = _datalength(m);
		return string(&m->data.messageData[0],datalen);
	}



	static size_t _pack(PackedMessage * m,
		string destination,
		string sender,
		string type,
		size_t reference,
		size_t MJD,
		size_t MPM,
		bool   accept,
		string status,
		string comment
	){
		SERIALIZE_ACCESS_ST();
		assert(m!=NULL);
		bzero((void*)m,MESSAGE_MAX_SIZE);
		size_t bdata_len = comment.size();
		if (bdata_len > (MESSAGE_MAX_SIZE - RESPONSE_MIN_SIZE)){
			bdata_len = (MESSAGE_MAX_SIZE - RESPONSE_MIN_SIZE);
		}
		int r1 = snprintf((char*)m, MESSAGE_MAX_SIZE,
				"%-3.3s%-3.3s%-3.3s%-9lu%-4lu%-6lu%-9lu@%-1.1s%-7.7s",
				destination.c_str(),
				sender.c_str(),
				type.c_str(),
				reference,
				bdata_len + (RFS_ACCEPT + RFS_STATUS),
				MJD,
				MPM,
				(accept ? "A" : "R"),
				status.c_str()
		);

		if (bdata_len)
			memcpy((char*)&m->data.responseData.r_comment[0], comment.c_str(), bdata_len);
		return r1+bdata_len;
	}
	static size_t _pack2(PackedMessage * m,
		string destination,
		string sender,
		string type,
		size_t reference,
		size_t MJD,
		size_t MPM,
		bool   accept,
		string status,
		char*  bdata,
		size_t bdata_len
	){
		SERIALIZE_ACCESS_ST();
		assert(m!=NULL);
		bzero((void*)m,MESSAGE_MAX_SIZE);
		if (bdata_len > (MESSAGE_MAX_SIZE - RESPONSE_MIN_SIZE)){
			bdata_len = (MESSAGE_MAX_SIZE - RESPONSE_MIN_SIZE);
		}
		int r1 = snprintf((char*)m, RESPONSE_MIN_SIZE,
				"%-3.3s%-3.3s%-3.3s%-9lu%-4lu%-6lu%-9lu@%-1.1s%-7.7s",
				destination.c_str(),
				sender.c_str(),
				type.c_str(),
				reference,
				bdata_len + (RFS_ACCEPT + RFS_STATUS),
				MJD,
				MPM,
				(accept ? "A" : "R"),
				status.c_str()
		);
		if (bdata && bdata_len)
			memcpy((char*)&m->data.responseData.r_comment[0], bdata, bdata_len);
		return r1+bdata_len;
	}

private:
	CommonICD& operator=(const CommonICD& t){return *this;}
	CommonICD(const CommonICD& t){}
	CommonICD(){}
	virtual ~CommonICD(){}
	DECLARE_ACCESS_MUTEX_ST();
};

#endif /* COMMONICD_H_ */
