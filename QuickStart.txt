
		========================================
		Quick Start User's guide for MCS-DR/DRSU
		========================================

====================================================================================
Version: DROS-1.5.0-Beta-Release
Date:    2012-06-22
Author:  Christopher Wolfe
====================================================================================

DROS Versions and ICD Version
=============================
  This quick start applies to DROS-1.5.0-Beta-Release. For additional information about versions and 
  features, please refer to the extended user's guide 'ExtendedUsersGuide.txt'.

Prerequisites
=============
  1) MCS-DR PC with x86_64 Ubuntu 9.04 
  2) packages installed: fftw3-dev, libgdbm3, libgdbm-dev, libfuse2, libfuse-dev, 
     lmsensors, smartmontools, mdadm, coretemp or f71882fg
  3) gnu C/C++ compiler (stdlib, pthreads, librt)
  4) DRSU (assembled IAW "LWA Engineering Memo MCS0019")
  5) Drivers for the Myricom 10GbE adapter have been built and installed


Files and Organization
======================
  The top level of this tar-ball contains this file 'QuickStart.txt', an extended user's 
  guide 'ExtendedUsersGuide.txt', and a 'build' folder.  Each folder under 'build' contains 
  the source and makefile for each of the binaries included in this tar-ball. For more 
  information on the all of the files and organization, see the extended user's guide.


Step 0: Root Access
===================
  You must be root for most of the tasks outlined here. The DROS software needs 
  root permission to work directly with partitions, so 'sudo su' before doing 
  anything is easiest. Note that building the software can be done in user space, 
  but installation requires root privileges. Consequently, you will need login 
  information:
  The default username and password for MCS-DR PCs is 
	mcsdr / mcsdrrdscm
  but may be 
	chwolfe2 / cnw112177.
  on earlier machines (first PC on-site at LWA1 and PC sent to JPL)
  
  At the bash prompt, type:
	>sudo su
  and enter the appropriate password.
  
  For any additional terminals you open, repeat this step.
	


Step 1: Installation
====================
  Note: Building the 'install' target will overwrite all files in the /LWA folder,
        so be sure to backup configuration files before building.

  At the bash prompt, type:
	>tar -xvf <tar-ball-file-name>
	>cd <tar-ball-file-name-minus-'.tar.gz'>/build
	>make all && make install

  This should generate a lot of output ending with:

	################################################################
	# Notice:
	# 
	# MCS-DR software has been installed to:
	#       /LWA
	# 
	# The default configuration files are installed to:
	#       /LWA/config/
	# 
	# You must modify defaults.cfg.example to reflect your network environment.
	# 
	# To launch the software, execute:
	#       /LWA/bin/WAVE_Y
	# 
	# To install the software to run on-boot, execute:
	#       /LWA/scripts/installStartupScript.sh /LWA/scripts/StartDROS.sh
	# 
	################################################################



Step 2: System Configuration
============================
  A) Determine which linux device is the 10Gbe Adapter, and which is 1GbE
	>cat /etc/udev/rules.d/70-persistent-net.rules:
     The device with module name 'myri10Ge' is the 10GbE adapter, others are 1GbE
     
  B) Edit /etc/network/interfaces and /etc/resolv.conf to suit site network environment.
  	>nano /etc/network/interfaces
	>nano /etc/resolv.conf

  C) Edit /LWA/config/defaults.cfg to reflect configuraiton in step 2 section B (above), as well.
     as machine reference designator, serial number, etc.

  D) TCP/IP + UDP configuration:
	>sysctl -e -p /LWA/config/netperformance.sysctl.conf;

  The following will be displayed:
	net.ipv4.tcp_mem = 56371200	75161600	112742400
	net.ipv4.tcp_wmem = 409600	1638400	419430400
	net.ipv4.tcp_rmem = 409600	8738000	419430400
	net.ipv4.udp_mem = 57859200	77145600	115718400
	net.ipv4.udp_rmem_min = 409600
	net.ipv4.udp_wmem_min = 409600
	net.core.wmem_max = 13107100
	net.core.rmem_max = 13107100
	net.core.wmem_default = 12492800
	net.core.rmem_default = 12492800
	net.core.netdev_max_backlog = 100000
	net.core.optmem_max = 204800


Step 3: DRSU preparation
========================
  This command will create a DRSU array for the most likely partition naming. For
  more complete description, see the extended user's guide.
  A) Create the array:
   	>mdadm --create /dev/md0 -c 256 -l 0 -n 5 /dev/sdb /dev/sdc /dev/sdd /dev/sde /dev/sdf

     You should see:
	mdadm: /dev/md0 has been started with 5 drives.
     
     Next:
	>cp /etc/mdadm/mdadm.conf /etc/mdadm/mdadm.conf.QS.bak
  	>mdadm --examine --scan > /etc/mdadm.conf
  
  B) Format the DRSU
	>mkdir -p /LWA/mounts/DRSU0
	>/LWA/bin/FUSE-LWAFS-READER -o direct_io,max_read=262144,max_write=262144,sync_read,device=/dev/md0 -s -f /LWA/mounts/DRSU0
     	
     You should see something like:
		...

		LWAFS: Creating filesystem on device '/dev/md0'
		[FILE SYSTEM] WARNING: Creating filesystem on device /dev/md0 !!!!
      		
		...
   	
		[FILE SYSTEM] Summary:
		[FILE SYSTEM]	         0 Files
		[FILE SYSTEM]	                 0 Bytes used by files
		[FILE SYSTEM]	           4194304 Bytes used for filesystem and formatting

     In another terminal:
	> umount /LWA/mounts/DRSU0
     
     The program in the first terminal should exit. 



Step 4: First Run
=================
  Normally, the DROS binary is launched from a rc.d script, but the first
  time it is run, I recommend launching it directly. 
  So, at the command line type:
	>/LWA/bin/WAVE_Y -flushData -flushLog -flushSchedule -flushConfig

  The following will be displayed:
	055240-012222981 : [BOOT] Processing option '-flushData'
	055240-012222981 : [BOOT] Processing option '-flushLog'
	055240-012222981 : [BOOT] Processing option '-flushSchedule'
	055240-012222981 : [BOOT] Processing option '-flushConfig'
	055240-012222981 : [BOOT] Loading system configuration.
	055240-012222985 : [DATABASE] Database File Created: '/LWA/database/configDb.gdbm'
	055240-012222985 : [DATABASE] Opening default values file: '/LWA/config/defaults.cfg'
	055240-012222985 : [DATABASE] Now filling database with default values.
	055240-012222987 : [DATABASE] Finished initializing database. 	Processed 20 lines 	 Added 7 records
	055240-012222987 : [DATABASE] Database File Opened: '/LWA/database/configDb.gdbm'
	055240-012222987 : [DATABASE] DB: 'MessageOutPort' => '5000'
	055240-012222987 : [DATABASE] DB: 'MyReferenceDesignator' => 'MD1'
	055240-012222987 : [DATABASE] DB: 'DataInPort' => '6002'
	...
	055240-012223996 : [BOOT] Created data receive queue.
	055240-012223997 : [BOOT] Reading system schedule.
	055240-012224001 : [DATABASE] Database File Created: '/LWA/database/scheduleDb.gdbm'
	055240-012224001 : [DATABASE] Database File Opened: '/LWA/database/scheduleDb.gdbm'
	055240-012224008 : [DATABASE] Database File Opened: '/LWA/database/scheduleDb.gdbm'
	055240-012224009 : [DATABASE] DB: 'SCHEDULEDATA.count' => '0'
	055240-012224010 : [DATABASE] DB: 'SCHEDULEENTRY.count' => '0'
	055240-012224010 : [BOOT] Finished reading system schedule.
	055240-012224011 : [BOOT] Booting Complete.

Step 5: Test Messaging
======================
  At this point, the system is up and listening for command messages. 
  To test messaging, use the included Msender utility. 

  In a new terminal:
	>/LWA/bin/Msender -v -Source "MCS" -Destination "MD1" -Type "PNG" -ReferenceNumber 0 -DestinationIpAddress localhost -DestinationPort 5001 -ResponseListenPort 5000    

  On the original terminal you should see:
	[MESSAGING] Received: 'MCS MD1 PNG         0  55240  12609312    0 '
	[MESSAGING] Sent: 'MD1 MCS PNG         0 055240 012609313 0009 A NORMAL  '

  On the new terminal you should see:
	[send]Message :
	[send]	Sender:                     MCS
	[send]	Destination:                MD1
	[send]	Type:                       PNG
	[send]	Reference:                  0
	[send]	Modified Julian Day:        55240
	[send]	Milliseconds Past Midnight: 12609312
	[send]	Data Length:                0
	[send]	Data:                       No Data Specified

	[recv]Response :
	[recv]	Sender:                     MD1
	[recv]	Destination:                MCS
	[recv]	Type:                       PNG
	[recv]	Reference:                  0
	[recv]	Modified Julian Day:        55240
	[recv]	Milliseconds Past Midnight: 12609313
	[recv]	Accept/Reject:              Accepted
	[recv]	General Status:             NORMAL 
	[recv]	Comment:                    No Comment Specified
	[recv]	Data Length:                9
	[recv]	Data: 
	[recv]		<   0>:   41 4e 4f 52 4d 41 4c 20  0 

Step 6: Exit First Run
======================
  In the new terminal from step 5:
	>/LWA/bin/Msender -v -Source "MCS" -Destination "MD1" -Type "SHT" -ReferenceNumber 0 -DestinationIpAddress localhost -DestinationPort 5001 -ResponseListenPort 5000    
  In the DROS terminal you should see 

	...

	055329-068135297 : [SHUTDOWN] Closed messaging receive socket.
	055329-068135316 : [SHUTDOWN] Closing internal storage file system.
	055329-068135335 : [FILE SYSTEM] Closing filesystem.
	055329-068135412 : [FILE SYSTEM] Unregistering Active File System 0:<34342936128>
	055329-068135433 : [SHUTDOWN] Closed internal storage file system.
	055329-068135453 : [SHUTDOWN] Closing system log.
	055329-068135514 : [SHUTDOWN] Closing config database. 
  
  and the DROS program will exit, returning control of the original terminal to you.

 
Step 7: Normal operation mode
=============================
  To install the DROS software to start on system boot, execute the following:
	>cd /LWA/scripts	
	>./installStartupScript.sh StartDROS.sh

  Terminal output should be as follows:
	update-rc.d: warning: /etc/init.d/StartDROS.sh missing LSB information
	update-rc.d: see <http://wiki.debian.org/LSBInitScripts>
	 Adding system startup for /etc/init.d/StartDROS.sh ...
	   /etc/rc0.d/K99StartDROS.sh -> ../init.d/StartDROS.sh
	   /etc/rc1.d/K99StartDROS.sh -> ../init.d/StartDROS.sh
	   /etc/rc6.d/K99StartDROS.sh -> ../init.d/StartDROS.sh
	   /etc/rc2.d/S99StartDROS.sh -> ../init.d/StartDROS.sh
	   /etc/rc3.d/S99StartDROS.sh -> ../init.d/StartDROS.sh
	   /etc/rc4.d/S99StartDROS.sh -> ../init.d/StartDROS.sh
	   /etc/rc5.d/S99StartDROS.sh -> ../init.d/StartDROS.sh


  Reboot, and verify DROS is responding to messaging as in Step 5. 
  The "Terminal" output of DROS can be found in '/LWA/runtime/runtime.log'
  For troubleshooting and more information, see the Extended User's Guide
  The "Terminal" output should be similar to the initial launch (in step 4).


Step 8: Scheduling a recording
==============================
  The format of scheduling a recording is as follows:
  	>/LWA/bin/Msender 
		-Source MCS 
		-Destination MD1 
		-Type REC 
		-ReferenceNumber 123456789 
		-DestinationIpAddress localhost 
		-DestinationPort 5000 
		-ResponseListenPort 5001 
		-Data "xxxxxx yyyyyyyyy zzzzzzzzz FFFFFFFFFFFFFF...FFF"
  which will request that a recording of 
	zzzzzzzzz milliseconds in length 
	starting on the day xxxxxx         xxxxxx is Modified Julian Day 
	at yyyyyyyyy milliseconds past midnight
	using data format specified by FFFFFFFFFFFFFF...FFF. 
  
  In order to process the request, it must be received at least 5-10 seconds before the 
  scheduled start time of the recording. 

  Select appropriate values for xxxxxx, yyyyyyyyy, zzzzzzzzz, and FFFFFFFFFFFFFF...FFF
  Note the FFFFFFFFFFFFFF...FFF values are defined in 'formats.cfg'

  In the new window from step 5, enter the following* (line breaks added for clarity):
  *Remember to substitute appropriate config and time info
	>/LWA/bin/Msender -v -Source MCS -Destination MD1 -Type REC -ReferenceNumber 1 
	-DestinationIpAddress localhost -DestinationPort 5001 -ResponseListenPort 5000 
	-Data "55240 13500000 10000 DEFAULT_TBN"

  In the second terminal, you should see:
	...
	[recv]	Modified Julian Day:        55240
	[recv]	Milliseconds Past Midnight: 13276752
	[recv]	Accept/Reject:              Accepted
	[recv]	General Status:             NORMAL 
	[recv]	Comment:                    055240_000000001
	[recv]	Data Length:                25
	[recv]	Data: 
	[recv]		<   0>:   41 4e 4f 52 4d 41 4c 20 30 35 35 32 34 30 5f 30 
	[recv]		<  10>:   30 30 30 30 30 30 30 31  0 
  
  This notifies us that the command was received and the the file 055240_000000001 will
  be used to hold the data.	

  In '/LWA/runtime/runtime.log', you should see:
	055240-013276748 : [FILE SYSTEM] Creating file '055240_000000001' of size 1174405120 bytes
	055240-013276751 : [FILE SYSTEM] File created successfully
	055240-013276751 : [FILE SYSTEM] Set File Metadata for '055240_000000001'.
	[MESSAGING] Received: 'MCS MD1 REC         1  55240  13276747   32 55240 13500000 10000 DEFAULT_TBN'
	[MESSAGING] Sent: 'MD1 MCS REC         1 055240 013276752 0025 A NORMAL  055240_000000001'
	055240-013276752 : [SCHEDULER] Entered wait phase for operation with reference number 1

  Sometime later you should see:
	055240-013500000 : [SCHEDULER] Entered start phase for operation with reference number 1
	[OPERATION RECORD] Opening socket on port 6002
	[OPERATION RECORD] Bytes Received = 000000000000000; Ring Queue Occupancy=000000000315392; Live Capture PacketsAvailable=000000000000000; Time=02 Apr 2010 15:56:03:000000384
	[OPERATION RECORD] Bytes Received = 000000000000000; Ring Queue Occupancy=000000000315392; Live Capture PacketsAvailable=000000000000000; Time=02 Apr 2010 15:56:03:000000384
	[OPERATION RECORD] Bytes Received = 000000000000000; Ring Queue Occupancy=000000000315392; Live Capture PacketsAvailable=000000000000000; Time=02 Apr 2010 15:56:03:000000384
	[OPERATION RECORD] Bytes Received = 000000000000000; Ring Queue Occupancy=000000000315392; Live Capture PacketsAvailable=000000000000000; Time=02 Apr 2010 15:56:03:000000384
		...

	055240-013510000 : [SCHEDULER] Entered stop phase for operation with reference number 1
	055240-013510001 : [FILE SYSTEM] Set Complete Flag for '055240_000000001'.
	055240-013512500 : [SCHEDULER] Cooldown ended for operation with reference number 1, goto delete
	055240-013512501 : [SCHEDULER] Clean-up for operation with reference number 1 
	055240-013512502 : [SCHEDULER] Deleting operation with reference number 1 from schedule, return to idle

  In this example, the recording was for 10 seconds, but no data source was attached,
  consequently, Bytes Received is always 0. If a data source is connected and configured 
  to send to the MCS-DR, these numbers will be non-zero. 
  


  Now, to verify that the recording was made, issue a DIRECTORY-ENTRY-X MIB request:
	>/LWA/bin/Msender -v -Source MCS -Destination MD1 -Type RPT -ReferenceNumber 1 \
        -DestinationIpAddress localhost -DestinationPort 5001 -ResponseListenPort 5000 -Data "DIRECTORY-ENTRY-0"

  On the second terminal you should see:
	...
	[recv]	Modified Julian Day:        55240
	[recv]	Milliseconds Past Midnight: 15455364
	[recv]	Accept/Reject:              Accepted
	[recv]	General Status:             NORMAL 
	[recv]	Comment:                    055240_000000001 055240 013500000 055240 013510000                      DEFAULT_TBN 000000000000000 000000000004096 YES
	[recv]	Data Length:                128
	...

  On the original terminal you should see:
	[MESSAGING] Received: 'MCS MD1 RPT         1  55240  15455362   17 DIRECTORY-ENTRY-0'
	[MESSAGING] Sent: 'MD1 MCS RPT         1 055240 015455364 0128 A NORMAL  055240_000000001 055240 013500000 055240 013510000                      DEFAULT_TBN 000000000000000 000000000004096 YES'


Step 8: Retrieving recorded data
================================
  The get command takes arguments "<File name> <Start position> <length>", and length must 
  fit within the the data field of a response message, so about 8000 bytes or less at a a time. 
  Obviously, retrieving data this way is not going to be as fast as the recording rate. The 
  following is an example of retrieving data for visual inspection using the Msender utility:

	>/LWA/bin/Msender -v -Source MCS -Destination MD1 -Type GET -ReferenceNumber 123456790 \
	-DestinationIpAddress localhost -DestinationPort 5001 -ResponseListenPort 5000 -Data \
	"055240_000000001 000000000 4096"

  This would retrieve the 4096 bytes starting at position 0 from the file 055240_000000001.
  Note: Recording file names are constructed automatically from the MJD and reference number of 
  the REC command. The -v flag tells Msender to display both the outgoing message and response. 
  In our example, no data was recorded, so MCS-DR will respond with an 'Invalid range' because
  while the file exists, it has a 0 length (length is updated to reflect the actual recorded amount
  of data when a recording completes). Had there been any recorded data, this would show the
  message/response session and the data from the recording would be returned in the response's 
  data field -- and consequently displayed in hex by the Msender utility. 
 
  Additional methods of accessing data are outlined in the extended user's guide.
 


Additional Testing and trouble-shooting
=======================================
  The extended user's guide contains more informaiton on setting up tests to capture real data,
  as well as trouble shooting tips and suggestions. For anything not covered by these two 
  documents, please feel free to contact me directly by email chwolfe2@vt.edu.
	  
	



