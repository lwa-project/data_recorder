// ========================= DROSv2 License preamble===========================
// Software for DROSv2 is covered jointly under GPLv3 and Boost 1.0 licenses,
// to the extent required by included Boost sources and GPL sources, and to the
// more restrictive case pertaining thereunto, as defined herebelow. Beyond those
// requirements, any code not explicitly restricted by either of thowse two license
// models shall be deemed to be licensed under the GPLv3 license and subject to
// those restrictions.
//
// Copyright 2012, Virginia Tech, University of New Mexico, and Christopher Wolfe
//
// ========================= Boost License ====================================
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
// =============================== GPL V3 ====================================
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#ifndef DRXFRAME_H_
#define DRXFRAME_H_
#ifdef __cplusplus
extern "C"{
#endif

#define DRX_SAMPLES_PER_FRAME 4096

#define Fs_Day (196l* 1000000l * 60l *60l * 24l) /*16934400000000l*/

#include <fftw3.h>
#include <stdint.h>
#include "../Signals/Complex.h"


typedef struct __DrxFrameHeader{
	uint32_t syncCode;
	union {
		union {
			uint8_t  id;
			struct {
				uint8_t drx_beam:3;
				uint8_t drx_tuning:3;
				uint8_t drx_is_adp:1;
				uint8_t drx_polarization:1;
			};
		};
		uint32_t frameCount;
	};
	uint32_t secondsCount;
	uint16_t decFactor;
	uint16_t timeOffset;
	uint64_t timeTag;
	uint32_t freqCode;
	uint32_t statusFlags;
}__attribute__((packed)) DrxFrameHeader;

// DRX frame as received
typedef struct __DrxFrame{ // Jake's drx frame struct
	DrxFrameHeader header;
	PackedSample8  samples[DRX_SAMPLES_PER_FRAME];
	void fixByteOrder(){
		header.freqCode   = __builtin_bswap32(header.freqCode);
		header.decFactor  = (header.decFactor << 8)  | (header.decFactor >> 8);
		header.timeOffset = (header.timeOffset << 8) | (header.timeOffset >> 8);
		header.timeTag    = __builtin_bswap64(header.timeTag);
	}
	void unfixByteOrder(){
		fixByteOrder();
	}
} __attribute__((packed)) DrxFrame;
// alias to the above
typedef DrxFrame	PackedDrxFrame;

typedef struct __UnpackedDrxFrame{
	DrxFrameHeader header;
	UnpackedSample   samples[DRX_SAMPLES_PER_FRAME];
} __attribute__((packed)) UnpackedDrxFrame;

#define DRX_FRAME_SIZE (sizeof(DrxFrame))
#define DRX_TUNINGS       2l
#define DRX_POLARIZATIONS 2l
#define DRX_STREAMS       4l

const uint64_t DrxSampleRates[] = {
	  250000lu,
	  500000lu,
	 1000000lu,
	 2000000lu,
	 4900000lu,
	 9800000lu,
	19600000lu,
	39200000lu,
};

const uint64_t DrxDecFactors[] = {
	784lu,
	392lu,
	196lu,
	 98lu,
	 40lu,
	 20lu,
	 10lu,
	  5lu
};

const uint64_t DrxTimeTagSteps[] = {
		DRX_SAMPLES_PER_FRAME * 784lu,
		DRX_SAMPLES_PER_FRAME * 392lu,
		DRX_SAMPLES_PER_FRAME * 196lu,
		DRX_SAMPLES_PER_FRAME *  98lu,
		DRX_SAMPLES_PER_FRAME *  40lu,
		DRX_SAMPLES_PER_FRAME *  20lu,
		DRX_SAMPLES_PER_FRAME *  10lu,
		DRX_SAMPLES_PER_FRAME *   5lu
};
const uint64_t DrxDataRates[] = {
		((  250000lu * DRX_STREAMS * DRX_FRAME_SIZE) / DRX_SAMPLES_PER_FRAME),
		((  500000lu * DRX_STREAMS * DRX_FRAME_SIZE) / DRX_SAMPLES_PER_FRAME),
		(( 1000000lu * DRX_STREAMS * DRX_FRAME_SIZE) / DRX_SAMPLES_PER_FRAME),
		(( 2000000lu * DRX_STREAMS * DRX_FRAME_SIZE) / DRX_SAMPLES_PER_FRAME),
		(( 4900000lu * DRX_STREAMS * DRX_FRAME_SIZE) / DRX_SAMPLES_PER_FRAME),
		(( 9800000lu * DRX_STREAMS * DRX_FRAME_SIZE) / DRX_SAMPLES_PER_FRAME),
		((19600000lu * DRX_STREAMS * DRX_FRAME_SIZE) / DRX_SAMPLES_PER_FRAME),
		((39200000lu * DRX_STREAMS * DRX_FRAME_SIZE) / DRX_SAMPLES_PER_FRAME),
};
const double DrxTimeSteps[] = {
		1.0f /  250000.0f,
		1.0f /  500000.0f,
		1.0f / 1000000.0f,
		1.0f / 2000000.0f,
		1.0f / 4900000.0f,
		1.0f / 9800000.0f,
		1.0f /19600000.0f,
		1.0f /39200000.0f
};


#ifdef __cplusplus
}
#endif


#endif /* DRXFRAME_H_ */
