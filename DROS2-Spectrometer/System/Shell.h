// ========================= DROSv2 License preamble===========================
// Software for DROSv2 is covered jointly under GPLv3 and Boost 1.0 licenses,
// to the extent required by included Boost sources and GPL sources, and to the
// more restrictive case pertaining thereunto, as defined herebelow. Beyond those
// requirements, any code not explicitly restricted by either of thowse two license
// models shall be deemed to be licensed under the GPLv3 license and subject to
// those restrictions.
//
// Copyright 2012, Virginia Tech, University of New Mexico, and Christopher Wolfe
//
// ========================= Boost License ====================================
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
// =============================== GPL V3 ====================================
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.


#ifndef SHELL_H_
#define SHELL_H_

#include "../Primitives/StdTypes.h"

#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>


#include "Time.h"

typedef struct __Result{
	bool      cached;			// indicates result is from a previously cached run
	TimeStamp cache_time;		// time command was originally run MPM
	TimeStamp cache_expire;	    // time command expires
	bool      expires;			// flag indicating timely expiry
	string    command;	        // command line
	string    output;			// stdout of command
	int       return_code;		// return code
} Result;

typedef vector<Result> BashCache;

class Shell {
public:
	static const Result run(const string& command, const bool& cacheable=false, const millisecond& cache_longevity = 0){

		{
			boost::mutex::scoped_lock l(Shell::mtx);
			// scrub the cache each time we run a new command
			BashCache tmp(cache);
			cache.clear();
			foreach( Result res, tmp){
				if ((!res.expires)||(Time::compareTimestamps(res.cache_expire,Time::now()) == 1)){
					cache.push_back(res);
				}
			}
		}
		if (cacheable){
			boost::mutex::scoped_lock l(Shell::mtx);
			foreach(Result res, cache){
				if(!res.command.compare(command)){
					res.cached = true;
					return res;
				}
			}
		}
		return __run(command,cacheable,cache_longevity);
	}




private:
	static const Result __run(const string& command, const bool& cacheable=false, const millisecond& cache_longevity = 0){
		Result rv;
		rv.cache_time   = Time::now();
		rv.cache_expire = Time::addTime(rv.cache_time, cache_longevity);
		rv.cached       = false;
		rv.expires      = cache_longevity != FOREVER;
		rv.command      = command;
		rv.output       = "";
		rv.return_code  = -1;
		//cout << "Command: \n\t" << command << endl;
		FILE *pipedOutput = popen(rv.command.c_str(), "r");
		if (pipedOutput){
			while (!feof(pipedOutput)){
				char c = fgetc ( pipedOutput );
				if (c==EOF) {
					break;
				} else {
					rv.output.push_back(c);
				}
			}
			rv.return_code = pclose(pipedOutput);
			if (cacheable && (rv.return_code != -1)){
				boost::mutex::scoped_lock l(Shell::mtx);
				cache.push_back(rv);
			}
		}
		return rv;
	}

	static boost::mutex mtx;
	static BashCache    cache;
	Shell(){}
	virtual ~Shell(){}
};

#endif /* SHELL_H_ */
