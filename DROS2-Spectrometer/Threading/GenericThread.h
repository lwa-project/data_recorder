// ========================= DROSv2 License preamble===========================
// Software for DROSv2 is covered jointly under GPLv3 and Boost 1.0 licenses,
// to the extent required by included Boost sources and GPL sources, and to the
// more restrictive case pertaining thereunto, as defined herebelow. Beyond those
// requirements, any code not explicitly restricted by either of thowse two license
// models shall be deemed to be licensed under the GPLv3 license and subject to
// those restrictions.
//
// Copyright 2012, Virginia Tech, University of New Mexico, and Christopher Wolfe
//
// ========================= Boost License ====================================
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
// =============================== GPL V3 ====================================
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#ifndef GENERICTHREAD_H_
#define GENERICTHREAD_H_

#include "AbstractThread.h"
#include "../Primitives/StdTypes.h"
#include "../System/Log.h"
#include "../System/System.h"

#include <stdlib.h>
#include <boost/thread.hpp>
#include <sched.h>
#include <sys/time.h>
#include <sys/resource.h>

enum PriorityGroup {PG_IDLE, PG_MODERATE, PG_IO, PG_COMPUTE};


class GenericThread: public AbstractThread {
public:
	GenericThread(string name, PriorityGroup _pg, int _id=0):
		AbstractThread(name),
		t(NULL),
		interrupted(false),
		pg(_pg),
		id(_id){
	}
	bool isInterrupted(){
		return interrupted;
	}
	virtual void start(){
		t = new boost::thread(boost::bind(&GenericThread::__run, this));
	}

	virtual void stop(){
		if (t!=NULL){
			t->join();
		}
	}

	virtual void doAbort(){
		interrupted = true;
	}

	virtual void yield(){
		if (t!=NULL){
			t->yield();
		}
	}

	virtual ~GenericThread(){
		if (t) delete (t);
	}

	virtual void run(){

	}


	// i7 4-core + HT should have 8
	static int getTargetCpu(PriorityGroup pg, int id){
		int numCores = boost::thread::hardware_concurrency();
		switch(pg){
		case PG_IDLE:     // fall through
		case PG_MODERATE: return 0;
		case PG_IO:       return 1+(id%2); // 0 for network, 1 for file
		case PG_COMPUTE:  return 3+(id%(numCores-3));
		default:          return 0;
		}
	}

	static int getTargetPriority(PriorityGroup pg, int id){
		switch(pg){
		case PG_IDLE:     return 0;
		case PG_MODERATE: return -1;
		case PG_IO:       return -2;
		case PG_COMPUTE:  return -3;
		default:          return 1;
		}
	}


protected:
	GenericThread(){}
	boost::thread* t;
	volatile bool interrupted;
	PriorityGroup pg;
	int           id;
	void __run(){
			ThreadManager::getInstance()->announceSelf(AbstractThread::getName());
			// set cpu affinity
			int cpu = getTargetCpu(pg,id);
			cpu_set_t cpuset;
			CPU_ZERO(&cpuset);
			CPU_SET(cpu,&cpuset);
			if(sched_setaffinity(getpid(),sizeof(cpuset),&cpuset)<0){
				LOGC(L_WARNING, "[GenericThread] : Can't set CPU affinity : '"+string(strerror(errno))+"'", ACTOR_WARNING_COLORS);
			} else {
				LOGC(L_INFO, "[GenericThread] : Set CPU affinity : '"+LXS(cpu)+"'", ACTOR_COLORS);
			}
			// set priority
			int priority = getTargetPriority(pg,id);
			int res = setpriority(PRIO_PROCESS, 0, priority);
			if (res<0){
				LOGC(L_WARNING, "[GenericThread] : Can't set priority : '"+string(strerror(errno))+"'", ACTOR_WARNING_COLORS);
			} else {
				LOGC(L_INFO, "[GenericThread] : Set priority : '"+LXS(priority)+"'", ACTOR_COLORS);
			}
			run();
	}
};

#endif /* GENERICTHREAD_H_ */
