// ========================= DROSv2 License preamble===========================
// Software for DROSv2 is covered jointly under GPLv3 and Boost 1.0 licenses,
// to the extent required by included Boost sources and GPL sources, and to the
// more restrictive case pertaining thereunto, as defined herebelow. Beyond those
// requirements, any code not explicitly restricted by either of thowse two license
// models shall be deemed to be licensed under the GPLv3 license and subject to
// those restrictions.
//
// Copyright 2012, Virginia Tech, University of New Mexico, and Christopher Wolfe
//
// ========================= Boost License ====================================
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
// =============================== GPL V3 ====================================
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#include "misc.h"
#include <iostream>
#include <iomanip>
#include <errno.h>

using namespace std;

void progressbar(int percent, int width, ostream& os){
	os << "[";
	for (int i=0; i<width; i++){
		if (percent >= (((i+1)*100)/width)){
			os << "#";
		} else {
			os << "_";
		}
	}
	os << "] (" << setw(3) << percent << "%)";
}

#define CASE_ERR_RET_ERR(e) CASE_A_RET_A_STR(e)
string errnoStr(int e){
	switch(e){
		CASE_ERR_RET_ERR(EPERM);
		CASE_ERR_RET_ERR(ENOENT);
		CASE_ERR_RET_ERR(ESRCH);
		CASE_ERR_RET_ERR(EINTR);
		CASE_ERR_RET_ERR(EIO);
		CASE_ERR_RET_ERR(ENXIO);
		CASE_ERR_RET_ERR(E2BIG);
		CASE_ERR_RET_ERR(ENOEXEC);
		CASE_ERR_RET_ERR(EBADF);
		CASE_ERR_RET_ERR(ECHILD);
		CASE_ERR_RET_ERR(EAGAIN);
		CASE_ERR_RET_ERR(ENOMEM);
		CASE_ERR_RET_ERR(EACCES);
		CASE_ERR_RET_ERR(EFAULT);
		CASE_ERR_RET_ERR(ENOTBLK);
		CASE_ERR_RET_ERR(EBUSY);
		CASE_ERR_RET_ERR(EEXIST);
		CASE_ERR_RET_ERR(EXDEV);
		CASE_ERR_RET_ERR(ENODEV);
		CASE_ERR_RET_ERR(ENOTDIR);
		CASE_ERR_RET_ERR(EISDIR);
		CASE_ERR_RET_ERR(EINVAL);
		CASE_ERR_RET_ERR(ENFILE);
		CASE_ERR_RET_ERR(EMFILE);
		CASE_ERR_RET_ERR(ENOTTY);
		CASE_ERR_RET_ERR(ETXTBSY);
		CASE_ERR_RET_ERR(EFBIG);
		CASE_ERR_RET_ERR(ENOSPC);
		CASE_ERR_RET_ERR(ESPIPE);
		CASE_ERR_RET_ERR(EROFS);
		CASE_ERR_RET_ERR(EMLINK);
		CASE_ERR_RET_ERR(EPIPE);
		CASE_ERR_RET_ERR(EDOM);
		CASE_ERR_RET_ERR(ERANGE);
		CASE_ERR_RET_ERR(EDEADLK);
		CASE_ERR_RET_ERR(ENAMETOOLONG);
		CASE_ERR_RET_ERR(ENOLCK);
		CASE_ERR_RET_ERR(ENOSYS);
		CASE_ERR_RET_ERR(ENOTEMPTY);
		CASE_ERR_RET_ERR(ELOOP);
		CASE_ERR_RET_ERR(ENOMSG);
		CASE_ERR_RET_ERR(EIDRM);
		CASE_ERR_RET_ERR(ECHRNG);
		CASE_ERR_RET_ERR(EL2NSYNC);
		CASE_ERR_RET_ERR(EL3HLT);
		CASE_ERR_RET_ERR(EL3RST);
		CASE_ERR_RET_ERR(ELNRNG);
		CASE_ERR_RET_ERR(EUNATCH);
		CASE_ERR_RET_ERR(ENOCSI);
		CASE_ERR_RET_ERR(EL2HLT);
		CASE_ERR_RET_ERR(EBADE);
		CASE_ERR_RET_ERR(EBADR);
		CASE_ERR_RET_ERR(EXFULL);
		CASE_ERR_RET_ERR(ENOANO);
		CASE_ERR_RET_ERR(EBADRQC);
		CASE_ERR_RET_ERR(EBADSLT);
		CASE_ERR_RET_ERR(EBFONT);
		CASE_ERR_RET_ERR(ENOSTR);
		CASE_ERR_RET_ERR(ENODATA);
		CASE_ERR_RET_ERR(ETIME);
		CASE_ERR_RET_ERR(ENOSR);
		CASE_ERR_RET_ERR(ENONET);
		CASE_ERR_RET_ERR(ENOPKG);
		CASE_ERR_RET_ERR(EREMOTE);
		CASE_ERR_RET_ERR(ENOLINK);
		CASE_ERR_RET_ERR(EADV);
		CASE_ERR_RET_ERR(ESRMNT);
		CASE_ERR_RET_ERR(ECOMM);
		CASE_ERR_RET_ERR(EPROTO);
		CASE_ERR_RET_ERR(EMULTIHOP);
		CASE_ERR_RET_ERR(EDOTDOT);
		CASE_ERR_RET_ERR(EBADMSG);
		CASE_ERR_RET_ERR(EOVERFLOW);
		CASE_ERR_RET_ERR(ENOTUNIQ);
		CASE_ERR_RET_ERR(EBADFD);
		CASE_ERR_RET_ERR(EREMCHG);
		CASE_ERR_RET_ERR(ELIBACC);
		CASE_ERR_RET_ERR(ELIBBAD);
		CASE_ERR_RET_ERR(ELIBSCN);
		CASE_ERR_RET_ERR(ELIBMAX);
		CASE_ERR_RET_ERR(ELIBEXEC);
		CASE_ERR_RET_ERR(EILSEQ);
		CASE_ERR_RET_ERR(ERESTART);
		CASE_ERR_RET_ERR(ESTRPIPE);
		CASE_ERR_RET_ERR(EUSERS);
		CASE_ERR_RET_ERR(ENOTSOCK);
		CASE_ERR_RET_ERR(EDESTADDRREQ);
		CASE_ERR_RET_ERR(EMSGSIZE);
		CASE_ERR_RET_ERR(EPROTOTYPE);
		CASE_ERR_RET_ERR(ENOPROTOOPT);
		CASE_ERR_RET_ERR(EPROTONOSUPPORT);
		CASE_ERR_RET_ERR(ESOCKTNOSUPPORT);
		CASE_ERR_RET_ERR(EOPNOTSUPP);
		CASE_ERR_RET_ERR(EPFNOSUPPORT);
		CASE_ERR_RET_ERR(EAFNOSUPPORT);
		CASE_ERR_RET_ERR(EADDRINUSE);
		CASE_ERR_RET_ERR(EADDRNOTAVAIL);
		CASE_ERR_RET_ERR(ENETDOWN);
		CASE_ERR_RET_ERR(ENETUNREACH);
		CASE_ERR_RET_ERR(ENETRESET);
		CASE_ERR_RET_ERR(ECONNABORTED);
		CASE_ERR_RET_ERR(ECONNRESET);
		CASE_ERR_RET_ERR(ENOBUFS);
		CASE_ERR_RET_ERR(EISCONN);
		CASE_ERR_RET_ERR(ENOTCONN);
		CASE_ERR_RET_ERR(ESHUTDOWN);
		CASE_ERR_RET_ERR(ETOOMANYREFS);
		CASE_ERR_RET_ERR(ETIMEDOUT);
		CASE_ERR_RET_ERR(ECONNREFUSED);
		CASE_ERR_RET_ERR(EHOSTDOWN);
		CASE_ERR_RET_ERR(EHOSTUNREACH);
		CASE_ERR_RET_ERR(EALREADY);
		CASE_ERR_RET_ERR(EINPROGRESS);
		CASE_ERR_RET_ERR(ESTALE);
		CASE_ERR_RET_ERR(EUCLEAN);
		CASE_ERR_RET_ERR(ENOTNAM);
		CASE_ERR_RET_ERR(ENAVAIL);
		CASE_ERR_RET_ERR(EISNAM);
		CASE_ERR_RET_ERR(EREMOTEIO);
		CASE_ERR_RET_ERR(EDQUOT);
		CASE_ERR_RET_ERR(ENOMEDIUM);
		CASE_ERR_RET_ERR(EMEDIUMTYPE);
		CASE_ERR_RET_ERR(ECANCELED);
		CASE_ERR_RET_ERR(ENOKEY);
		CASE_ERR_RET_ERR(EKEYEXPIRED);
		CASE_ERR_RET_ERR(EKEYREVOKED);
		CASE_ERR_RET_ERR(EKEYREJECTED);
		CASE_ERR_RET_ERR(EOWNERDEAD);
		CASE_ERR_RET_ERR(ENOTRECOVERABLE);
	default :
		return "!!! UNKNOWN ERROR NUMBER !!!";
	}
}
